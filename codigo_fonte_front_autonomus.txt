/**
 * Create a new socket of the given `type`.
 *
 * @constructor
 * @param {String|Number} type
 * @api public
 */

var Socket =
exports.Socket = function (type) {
  var self = this;
  EventEmitter.call(this);
  this.type = type;
  this._zmq = new zmq.SocketBinding(defaultContext(), types[type]);
  this._paused = false;
  this._isFlushingReads = false;
  this._isFlushingWrites = false;
  this._outgoing = new BatchList();

  this._zmq.onReadReady = function () {
    setImmediate(function(){
      self._flushReads();
    });
  };

  this._zmq.onSendReady = function () {
    self._flushWrites();
  };
};

/**
 * Inherit from `EventEmitter.prototype`.
 */

util.inherits(Socket, EventEmitter);

/**
 * Set socket to pause mode
 * no data will be emit until resume() is called
 * all send() calls will be queued
 *
 * @api public
 */

Socket.prototype.pause = function() {
  this._paused = true;
}

/**
 * Set a socket back to normal work mode
 *
 * @api public
 */

Socket.prototype.resume = function() {
  this._paused = false;
  this._flushReads();
  this._flushWrites();
}

Socket.prototype.ref = function() {
  this._zmq.ref();
}

Socket.prototype.unref = function() {
  this._zmq.unref();
}

Socket.prototype.read = function() {
  var message = [], flags;

  if (this._zmq.state !== zmq.STATE_READY) {
    return null;
  }

  flags = this._zmq.getsockopt(zmq.ZMQ_EVENTS);

  if (flags & zmq.ZMQ_POLLIN) {
    do {
      message.push(this._zmq.recv());
    } while (this._zmq.getsockopt(zmq.ZMQ_RCVMORE));

    return message;
  }

  return null;
}


/**
 * Set `opt` to `val`.
 *
 * @param {String|Number} opt
 * @param {Mixed} val
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.setsockopt = function(opt, val){
  this._zmq.setsockopt(opts[opt] || opt, val);
  return this;
};

/**
 * Get socket `opt`.
 *
 * @param {String|Number} opt
 * @return {Mixed}
 * @api public
 */

Socket.prototype.getsockopt = function(opt){
  return this._zmq.getsockopt(opts[opt] || opt);
};

/**
 * Socket opt accessors allowing `sock.backlog = val`
 * instead of `sock.setsockopt('backlog', val)`.
 */

Object.keys(opts).forEach(function(name){
  Socket.prototype.__defineGetter__(name, function() {
    return this._zmq.getsockopt(opts[name]);
  });

  Socket.prototype.__defineSetter__(name, function(val) {
    if ('string' == typeof val) val = Buffer.from(val, 'utf8');
    return this._zmq.setsockopt(opts[name], val);
  });
});

/**
 * Return true if socket state is closed.
 */
Socket.prototype.__defineGetter__("closed", function() {
  return this._zmq.state === zmq.STATE_CLOSED;
});

/**
 * Async bind.
 *
 * Emits the "bind" event.
 *
 * @param {String} addr
 * @param {Function} cb
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.bind = function(addr, cb) {
  var self = this;
  this._zmq.bind(addr, function(err) {
    if (err) {
      return cb && cb(err);
    }

    self._flushReads();
    self._flushWrites();

    self.emit('bind', addr);
    cb && cb();
  });
  return this;
};

/**
 * Sync bind.
 *
 * @param {String} addr
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.bindSync = function(addr) {
  this._zmq.bindSync(addr);

  return this;
};

/**
 * Async unbind.
 *
 * Emits the "unbind" event.
 *
 * @param {String} addr
 * @param {Function} cb
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.unbind = function(addr, cb) {
  if (zmq.ZMQ_CAN_UNBIND) {
    var self = this;
    this._zmq.unbind(addr, function(err) {
      if (err) {
        return cb && cb(err);
      }
      self.emit('unbind', addr);

      self._flushReads();
      self._flushWrites();
      cb && cb();
    });
  } else {
    cb && cb();
  }
  return this;
};

/**
 * Sync unbind.
 *
 * @param {String} addr
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.unbindSync = function(addr) {
  if (zmq.ZMQ_CAN_UNBIND) {
    this._zmq.unbindSync(addr);
  }
  return this;
}

/**
 * Connect to `addr`.
 *
 * @param {String} addr
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.connect = function(addr) {
  this._zmq.connect(addr);
  return this;
};

/**
 * Disconnect from `addr`.
 *
 * @param {String} addr
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.disconnect = function(addr) {
  if (zmq.ZMQ_CAN_DISCONNECT) {
    this._zmq.disconnect(addr);
  }
  return this;
};

/**
 * Enable monitoring of a Socket
 *
 * @param {Number} timer interval in ms > 0 or Undefined for default
 * @param {Number} The maximum number of events to read on each interval, default is 1, use 0 for reading all events
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.monitor = function(interval, numOfEvents) {
  if (zmq.ZMQ_CAN_MONITOR) {
    var self = this;

    self._zmq.onMonitorEvent = function(event_id, event_value, event_endpoint_addr, ex) {
      self.emit(events[event_id], event_value, event_endpoint_addr, ex);
    }

    self._zmq.onMonitorError = function(error) {
      self.emit('monitor_error', error);
    }

    this._zmq.monitor(interval, numOfEvents);
  } else {
    throw new Error('Monitoring support disabled check zmq version is > 3.2.1 and recompile this addon');
  }
  return this;
};

/**
 * Disable monitoring of a Socket release idle handler
 * and close the socket
 *
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.unmonitor = function() {
  if (zmq.ZMQ_CAN_MONITOR) {
    this._zmq.unmonitor();
  }
  return this;
};


/**
 * Subscribe with the given `filter`.
 *
 * @param {String} filter
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.subscribe = function(filter) {
  this._subscribe = filter;
  return this;
};

/**
 * Unsubscribe with the given `filter`.
 *
 * @param {String} filter
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.unsubscribe = function(filter) {
  this._unsubscribe = filter;
  return this;
};


/**
 * Send the given `msg`.
 *
 * @param {String|Buffer|Array} msg
 * @param {Number} [flags]
 * @param {Function} [cb]
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.send = function(msg, flags, cb) {
  flags = flags | 0;

  if (Array.isArray(msg)) {
    for (var i = 0, len = msg.length; i < len; i++) {
      var isLast = i === len - 1;
      var msgFlags = isLast ? flags : flags | zmq.ZMQ_SNDMORE;
      var callback = isLast ? cb : undefined;

      this._outgoing.append(msg[i], msgFlags, callback);
    }
  } else {
    this._outgoing.append(msg, flags, cb);
  }

  if (this._outgoing.canSend()) {
    this._zmq.pending = true;
    this._flushWrites();
  } else {
    this._zmq.pending = false;
  }

  return this;
};

Socket.prototype._emitMessage = function (message) {
  if (message.length === 1) {
    // hot path
    this.emit('message', message[0]);
  } else {
    this.emit.apply(this, ['message'].concat(message));
  }
}

Socket.prototype._flushRead = function () {
  try {
    var message = this._zmq.readv(); // can throw
    if (!message) {
      return false;
    }
    // Handle received message immediately to prevent memory leak in driver
    this._emitMessage(message)
  } catch (error) {
    this.emit('error', error); // can throw
  }
  return true;
};

Socket.prototype._flushWrite = function () {
  var batch = this._outgoing.fetch();
  if (!batch) {
    this._zmq.pending = false;
    return false;
  }

  try {
    if (this._zmq.sendv(batch.content)) {
      this._zmq.pending = this._outgoing.canSend();
      batch.invokeSent(this);
      return true;
    }

    this._outgoing.restore(batch);
    return false;
  } catch (sendError) {
    this._zmq.pending = this._outgoing.canSend();
    batch.invokeError(this, sendError); // can throw
    return false;
  }
};


Socket.prototype._flushReads = function() {
  if (this._paused || this._isFlushingReads) return;

  this._isFlushingReads = true;

  while (this._flushRead());

  this._isFlushingReads = false;

  // if many sends happened, but ended up in the queue (eg. in a req/rep scenario where each send must be followed by a
  // response), we can try to send again now

  this._flushWrites();
};

Socket.prototype._flushWrites = function() {
  if (this._paused || this._isFlushingWrites) return;

  this._isFlushingWrites = true;

  var sent;

  do {
    try {
      sent = this._flushWrite();
    } catch (error) {
      this._isFlushingWrites = false;
      this.emit('error', error); // can throw
      return;
    }
  } while (sent);

  this._isFlushingWrites = false;
};

/**
 * Close the socket.
 *
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.close = function() {
  this._zmq.close();
  return this;
};

/**
 * Create a `type` socket with the given `options`.
 *
 * @param {String} type
 * @param {Object} options
 * @return {Socket}
 * @api public
 */

exports.socket =
exports.createSocket = function(type, options) {
  var sock = new Socket(type);
  for (var key in options) sock[key] = options[key];
  return sock;
};

exports.Context.setMaxThreads = function(value) {
  if (!zmq.ZMQ_CAN_SET_CTX) {
    throw new Error('Setting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');
  }
  var defaultCtx = defaultContext();
  defaultCtx.setOpt(zmq.ZMQ_IO_THREADS, value);
};

exports.Context.getMaxThreads = function() {
  if (!zmq.ZMQ_CAN_SET_CTX) {
    throw new Error('Getting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');
  }
  var defaultCtx = defaultContext();
  return defaultCtx.getOpt(zmq.ZMQ_IO_THREADS);
};

exports.Context.setMaxSockets = function(value) {
  if (!zmq.ZMQ_CAN_SET_CTX) {
    throw new Error('Setting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');
  }
  var defaultCtx = defaultContext();
  defaultCtx.setOpt(zmq.ZMQ_MAX_SOCKETS, value);
};

exports.Context.getMaxSockets = function() {
  if (!zmq.ZMQ_CAN_SET_CTX) {
    throw new Error('Getting of context options disabled, check zmq version is >= 3.2.1 and recompile this addon');
  }
  var defaultCtx = defaultContext();
  return defaultCtx.getOpt(zmq.ZMQ_MAX_SOCKETS);
};

/**
 * JS based on API characteristics of the native zmq_proxy()
 */

function proxy (frontend, backend, capture){
  switch(frontend.type+'/'+backend.type){
    case 'push/pull':
    case 'pull/push':
    case 'xpub/xsub':
      if(capture){

        frontend.on('message',function (){
          backend.send([].slice.call(arguments));
        });

        backend.on('message',function (){
          frontend.send([].slice.call(arguments));

          //forwarding messages over capture socket
          capture.send([].slice.call(arguments));
        });

      } else {

        //no capture socket provided, just forwarding msgs to respective sockets
        frontend.on('message',function (){
          backend.send([].slice.call(arguments));
        });

        backend.on('message',function (){
          frontend.send([].slice.call(arguments));
        });

      }
      break;
    case 'router/dealer':
    case 'xrep/xreq':
      if(capture){

        //forwarding router/dealer pack signature: id, delimiter, msg
        frontend.on('message',function (id,delimiter,msg){
          backend.send([].slice.call(arguments));
        });

        backend.on('message',function (id,delimiter,msg){
          frontend.send([].slice.call(arguments));

          //forwarding message to the capture socket
          capture.send([].slice.call(arguments, 2));
        });

      } else {

        //forwarding router/dealer signatures without capture
        frontend.on('message',function (id,delimiter,msg){
          backend.send([].slice.call(arguments));
        });

        backend.on('message',function (id,delimiter,msg){
          frontend.send([].slice.call(arguments));
        });

      }
      break;
    default:
      throw new Error('wrong socket order to proxy');
  }
}

exports.proxy = proxy;



index.js: 

'use strict';
const path = require('path');
const execa = require('execa');

const create = (columns, rows) => ({
	columns: parseInt(columns, 10),
	rows: parseInt(rows, 10)
});

module.exports = () => {
	const env = process.env;
	const stdout = process.stdout;
	const stderr = process.stderr;

	if (stdout && stdout.columns && stdout.rows) {
		return create(stdout.columns, stdout.rows);
	}

	if (stderr && stderr.columns && stderr.rows) {
		return create(stderr.columns, stderr.rows);
	}

	// These values are static, so not the first choice
	if (env.COLUMNS && env.LINES) {
		return create(env.COLUMNS, env.LINES);
	}

	if (process.platform === 'win32') {
		try {
			// Binary: https://github.com/sindresorhus/win-term-size
			const size = execa.sync(path.join(__dirname, 'vendor/windows/term-size.exe')).stdout.split(/\r?\n/);

			if (size.length === 2) {
				return create(size[0], size[1]);
			}
		} catch (err) {}
	} else {
		if (process.platform === 'darwin') {
			try {
				// Binary: https://github.com/sindresorhus/macos-term-size
				const size = execa.shellSync(path.join(__dirname, 'vendor/macos/term-size')).stdout.split(/\r?\n/);

				if (size.length === 2) {
					return create(size[0], size[1]);
				}
			} catch (err) {}
		}

		// `resize` is preferred as it works even when all file descriptors are redirected
		// https://linux.die.net/man/1/resize
		try {
			const size = execa.sync('resize', ['-u']).stdout.match(/\d+/g);

			if (size.length === 2) {
				return create(size[0], size[1]);
			}
		} catch (err) {}

		try {
			const columns = execa.sync('tput', ['cols']).stdout;
			const rows = execa.sync('tput', ['lines']).stdout;

			if (columns && rows) {
				return create(columns, rows);
			}
		} catch (err) {}
	}

	return create(80, 24);
};



socket.js: 

try {
  const express = require('express')
  const app = express()
  const http = require('http').Server(app)
  const io = require('socket.io')(http, {
    cors: {
      origin: '*',
    },
  })
  const zmq = require('zeromq')

  // socket to talk to server
  const requester = zmq.socket('req')

  console.log('Executando o socket...')
  requester.connect('tcp://localhost:8000')

  requester.on('message', function(reply) {
    const data = JSON.parse(reply.toString())

    console.log({ data })

    if (data.cameraStatus !== null) {
      io.emit('cameraStatus', reply.toString())
    }

    if (data.Action !== null) {
      io.emit('detection', reply.toString())
    }

    requester.send('atualize')

    // TODO remover esse log
    console.log('Received reply: [', reply.toString(), ']')
  })

  // Start
  requester.send('establish connection')

  const server = http.listen(3001, () => {
    console.log('Socket is running on port', server.address().port)
  })
} catch (e) {
  console.log(e)
  console.log('<--!!!Ambiente node é necessário estar configurado!!!-->')
}



electron.js: 

const { app, BrowserWindow, Menu } = require('electron')
const path = require('path')
const isDev = require('electron-is-dev')

//const socket = require('./socket.js')
//var spawn = require('child_process').spawn
//cp.execFile(path.join(__dirname, 'socket.js'))
/*
const { spawn } = require('child_process')
const bat = spawn('node', [path.join(__dirname, 'socket.js')], { shell: true })

bat.stdout.on('data', data => {
  console.log(data.toString())
})

bat.stderr.on('data', data => {
  console.error(data.toString())
})

bat.on('exit', code => {
  console.log(`Child exited with code ${code}`)
}) */

let mainWindow

const mainMenuTemplate = [
  {
    role: 'Autonomus',
  },
]

function createWindow() {
  mainWindow = new BrowserWindow({
    icon: __dirname + '/icon.ico',
    webPreferences: {
      nodeIntegration: false,
    },
  })
  mainWindow.maximize()
  const mainMenu = Menu.buildFromTemplate(mainMenuTemplate)
  Menu.setApplicationMenu(mainMenu)
  mainWindow.loadURL(
    isDev
      ? 'http://localhost:3000'
      : `file://${path.join(__dirname, '../build/index.html')}`
  )

  mainWindow.on('closed', () => (mainWindow = null))
}

function closeAll() {
  const execSync = require('child_process').execSync
  execSync("taskkill /IM autonomus-socket-win.exe")
  execSync("taskkill /IM build.exe")
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    closeAll()
    app.quit()
  }
})

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow()
  }
})

//
// Client.js
//
// const zmq = require('zeromq');
// import zmq from 'zeromq'
// const requester = zmq.socket('req');



index.js: 

import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'

ReactDOM.render(<App />, document.getElementById('root'))



routes.js: 

import React from 'react'
// import { isAuthenticated } from './auth';
import { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom'

import { Initial, Home, Context, Action, Write, } from './pages'

import Configuration from './pages/Configuration'
import SetPhrases from 'pages/SetPhrases'

//não está importando o componente ./pages/Home

// const PrivateRoute = ({ component: Component, ...rest }) => (
//   <Route
//     {...rest}
//     render={props =>
//       isAuthenticated() ? (
//         <Component {...props} />
//       ) : (
//         <Redirect to={{ pathname: '/', state: { from: props.location } }} />
//       )
//     }
//   />
// );

const Routes = () => (
  <Router>
    <Switch>
      <Redirect exact from='/' to='/initial' />
      <Route path='/initial' component={Initial} />
      <Route path='/Configuracao' component={Configuration} />
      <Route path='/home' component={Home} />
      <Route path='/set-phrases' component={SetPhrases} />

      {/* Redirect necessário para recarregar o timer da página */}
      <Redirect
        exact
        from='/contexts/:contextId'
        to='/contexts/:contextId/options'
      />
      <Route exact path='/contexts/:contextId/options' component={Context} />

      {/* Redirect necessário para recarregar o timer da página */}
      <Redirect exact from='/actions/:actionId' to='/actions/:actionId/play' />
      <Route exact path='/actions/:actionId/play' component={Action} />

      <Route path='/quero-escrever' component={Write} />
      <Route path='/autonomus-casa' component={Write} />

      <Route
        exact
        path='*'
        component={({ match, history }) => {
          return (
            <>
              <h1>404 Page '${match.url}' not found!</h1>
              <div>
                <button onClick={history.push('/home')}>
                  ir para a página inicial
                </button>
              </div>
              <div>
                <button onClick={history.push('/initial')}>Reiniciar</button>
              </div>
            </>
          )
        }}
      />
    </Switch>
  </Router>
)

export default Routes



App.js: 

import React, { useState, useEffect, useCallback, useRef } from 'react'
import { Container } from './styles/components'
import Routes from './routes'
import { GlobalContext } from './contexts/global.context'
import { ConfigProvider } from './contexts/config.context'
import GlobalStyle from './styles/global'
import UserInputKeyService from './services/UserInputKeyService'
import CAMERA_STATUS from './types/CameraStatus'
import useEyeTrackingSocket from './hooks/useEyeTrackingSocket'

const App = () => {
  const userInputServiceRef = useRef(new UserInputKeyService())
  const eyeTrackingData = useEyeTrackingSocket()

  const [global, setGlobal] = useState({
    action: 'none',
    soundOn: true,
    mode: 'light',
    cameraStatus: CAMERA_STATUS.DISABLED,
  })

  const onUserInput = useCallback(
    res => {
      setGlobal({
        ...global,
        action: res.Action,
      })
    },
    [global]
  )

  useEffect(() => {
    setGlobal({
      ...global,
      ...eyeTrackingData,
    })
  }, [eyeTrackingData])

  useEffect(() => {
    userInputServiceRef.current.addInputListener('Space', onUserInput)
  }, [])

  const config = { ...global, modifier: setGlobal }

  return (
    <ConfigProvider>
      <GlobalContext.Provider value={config}>
        <Container>
          <Routes />
          <GlobalStyle />
        </Container>
      </GlobalContext.Provider>
    </ConfigProvider>
  )
}

export default App



Action.js: 

const ACTION = {
  NONE: 'none',
  SELECTED: 'selected',
}

export default ACTION



CameraStatus.js: 

const CAMERA_STATUS = {
  ENABLED: 'enabled',
  DISABLED: 'disabled',
}

export default CAMERA_STATUS



global.context.js: 

import { createContext } from 'react'

const initialContext = {
  action: '',
  soundOn: true,
  mode: 'light',
}

export const GlobalContext = createContext(initialContext.action)



config.context.js: 

import React, { createContext, useState, useEffect } from 'react'
import { getConfig, setConfig } from '@/utils/storage'

const ConfigContext = createContext()

export const ConfigProvider = ({ children }) => {
  const [speedBlink, setSpeedBlink] = useState('Devagar')
  const [speedTimer, setSpeedTimer] = useState('Devagar')
  const [theme, setTheme] = useState('Claro')
  const [sound, setSound] = useState(true)
  const [voice, setVoice] = useState('male')
  const [fontSize, setFontSize] = useState('normal')
  const [autonomusCasa, setAutonomusCasa] = useState(false)
  const [tvModal, setTvModal] = useState(false)
  const [volModal, setVolModal] = useState(false)
  const [layoutTeclado, setLayoutTeclado] = useState('frequencia')

  /// temporario sala
  const [lampadaOnOff, setLampadaOnOff] = useState(false)
  const [tomadaOnOff, setTomadaOnOff] = useState(false)
  const [prosthesesOpenClosed, setProsthesesOpenClosed] = useState(true)

  const [loading, setLoading] = useState(true)

  useEffect(() => {
    setLoading(true)
    const settings = getConfig()
    setSpeedBlink(settings.speedBlink)
    setSpeedTimer(settings.speedTimer)
    setTheme(settings.theme)
    setSound(settings.sound)
    setVoice(settings.voice)
    setFontSize(settings.fontSize)
    setAutonomusCasa(settings.autonomusCasa)
    setTvModal(settings.tvModal)
    setVolModal(settings.volModal)
    setLayoutTeclado(settings.layoutTeclado)
    setLampadaOnOff(settings.lampadaOnOff)
    setTomadaOnOff(settings.tomadaOnOff)
    setLoading(false)
  }, [])

  useEffect(() => {
    setLoading(true)
    setConfig({
      speedBlink,
      speedTimer,
      theme,
      sound,
      voice,
      fontSize,
      autonomusCasa,
      volModal,
      tvModal,
      layoutTeclado,
      lampadaOnOff,
      tomadaOnOff,
      prosthesesOpenClosed,
    })
    setLoading(false)
  }, [
    speedBlink,
    speedTimer,
    theme,
    sound,
    voice,
    fontSize,
    autonomusCasa,
    volModal,
    tvModal,
    layoutTeclado,
    lampadaOnOff,
    tomadaOnOff,
  ])

  function changeSpeedBlink(label) {
    setSpeedBlink(label)
  }

  function changeSpeedTimer(label) {
    setSpeedTimer(label)
  }

  function changeTheme(label) {
    setTheme(label)
  }

  function changeSound() {
    setSound(!sound)
  }

  function changeVoice(label) {
    setVoice(label)
  }

  function changeFontSize(label) {
    setFontSize(label)
  }

  function changeAutonomusCasa() {
    setAutonomusCasa(!autonomusCasa)
  }

  function changeTvModal() {
    setTvModal(!tvModal)
  }

  function changeVolModal() {
    setVolModal(!volModal)
  }

  function changeLayoutTeclado(label) {
    setLayoutTeclado(label)
  }

  function changeSalaLampada() {
    setLampadaOnOff(!lampadaOnOff)
  }
  function changeSalaTamada() {
    setTomadaOnOff(!tomadaOnOff)
  }
  function changeProstheses() {
    setProsthesesOpenClosed(!prosthesesOpenClosed)
  }

  function changeDefaultConfig() {
    setSpeedBlink('Devagar')
    setSpeedTimer('Devagar')
    setTheme('Claro')
    setSound(true)
    setVoice('male')
    setFontSize('normal')
    setAutonomusCasa(false)
    setTvModal(false)
    setVolModal(false)
    setLayoutTeclado('frequencia')
    setLampadaOnOff(false)
    setTomadaOnOff(false)
  }

  return (
    <ConfigContext.Provider
      value={{
        speedBlink,
        changeSpeedBlink,
        speedTimer,
        changeSpeedTimer,
        theme,
        changeTheme,
        sound,
        changeSound,
        voice,
        changeVoice,
        fontSize,
        changeFontSize,
        autonomusCasa,
        changeAutonomusCasa,
        tvModal,
        changeTvModal,
        volModal,
        changeVolModal,
        layoutTeclado,
        changeLayoutTeclado,
        changeDefaultConfig,
        tomadaOnOff,
        changeSalaTamada,
        lampadaOnOff,
        changeSalaLampada,
        prosthesesOpenClosed,
        changeProstheses,
      }}
    >
      {!loading && children}
    </ConfigContext.Provider>
  )
}

export default ConfigContext



keys.js: 

export const CONFIG_KEY = '@Autonomus:config'



mqttPublish.js: 


const mqtt = require('mqtt')

const publish = (topic, messageJson) => {

  const options = {
    reconnectPeriod: 20000,
    connectTimeout: 30 * 1000,
  };

  const client = mqtt.connect('mqtt://localhost:8883', options)
  
  client.on('connect', () => {
    client.subscribe(topic, (err) => {
      if (!err) {
        client.publish(topic, JSON.stringify(messageJson))
        client.end()
      }
    })
  })

}

module.exports = publish
module.exports.publish = publish


sound.js: 

import { Howl } from 'howler'

export function audio(src) {
  const audio = new Howl({ volume: 1.0, src })

  return {
    play() {
      audio.play()
    },
    stop() {
      audio.stop()
    },
  }
}



checkSpeedTimer.js: 

const speedTimer = {
  Devagar: 4000,
  Normal: 3000,
  Rápido: 2000,
}

export default function checkSpeedTimer(config) {
  return speedTimer[config] || 4000
}



navigationWithClickSound.js: 

/* import { audio } from './sound'
import ButtonClickSound from '@/assets/Botões/button_click_sound.mp3' */

export const NavigationTo = (
  history,
  historyLabel,
  audioActionCurrent,
  clearAudioTimers,
  modifierState
) => {
  modifierState()
  clearAudioTimers && clearAudioTimers()
  audioActionCurrent && audioActionCurrent.stop()
  historyLabel && historyLabel === 'voltar'
    ? history.goBack()
    : history.push(historyLabel)
}

export const NavigationToWithSound = (
  history,
  historyLabel,
  audioActionCurrent,
  clearAudioTimers,
  modifierState
) => {
  modifierState()
  clearAudioTimers && clearAudioTimers()
  audioActionCurrent && audioActionCurrent.play()
  historyLabel && historyLabel === 'voltar'
    ? history.goBack()
    : history.push(historyLabel)
}



storage.js: 

import { CONFIG_KEY } from './keys'

const defaultSettings = {
  speedBlink: 'Devagar',
  speedTimer: 'Devagar',
  theme: 'Claro',
  sound: true,
  voice: 'male',
  fontSize: 'normal',
  autonomusCasa: false,
  tvModal: false,
  volModal: false,
  layoutTeclado: 'frequencia',

  lampadaOnOff: true,
  tomadaOnOff: true,
  prosthesesOpenClosed: false,
}

export function setConfig(settings) {
  localStorage.setItem(CONFIG_KEY, JSON.stringify(settings))
}

export function getConfig() {
  const settings = localStorage.getItem(CONFIG_KEY)
  if (!settings) {
    setConfig(defaultSettings)

    return defaultSettings
  }

  return JSON.parse(settings)
}



global.js: 

import { createGlobalStyle } from 'styled-components'

export default createGlobalStyle`
  * {
    margin: 0;
    padding: 0;
    outline: 0;
    box-sizing: border-box;
  }

  body {
    font-family: Lato, sans-serif;
    font-size: 14px;
    background: #F8F8F8;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
  }
  html, body, #root {

  }
  a:link {text-decoration: none;color: #000099}
  a:active {text-decoration: none;}
  a:visited {text-decoration: none;color: #000099}
  a:hover {text-decoration: underline;color: #000099}
`



components.js: 

import styled from 'styled-components'

export const Container = styled.div`
  height: 100vh;
  margin: 0;
  width: 100vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

`
export const ContainerContexts = styled.div`
  height: 100vh;
  width: 100vw;
  display: grid;
  grid-template-rows: 0.5fr 4fr 5fr;
  align-items: center;
  /* barra de rolagem aparecendo... */
  overflow: hidden;
  position:relative;
  .dark-background{
    position:absolute;
    width:100vw;
    height:100vh;
    background:rgb(0,0,0,0.7);
    z-index:100;
  }
`

export const ContainerActions = styled.div`
  width: 100vw;
  height: 95%;

  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-row-start: 2;
  grid-row-end: 4;
  justify-content: center;
  align-items: center;
  .ac-row1{
    width: 100vw;
    height:50%;
    display:flex;
    align-items:center;
  }
  .ac-row2{
    width: 100vw;
    height:50%;
    display:flex;
    align-items:center;
  }
  @media (max-width: 920px) {
    grid-template-columns: repeat(2, 1fr);
  }
`

export const ContainerAction = styled.div`
  height: 100%;
  width: 100%;
  display: grid;
  grid-template-rows: 0.5fr 7fr;
  align-items: center;
  /* barra de rolagem aparecendo... */
  overflow: hidden;
`

export const Footer = styled.div`
  width: 100%;
  height: 90%;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  justify-self: center;
  align-self: center;
  align-content: center;
  padding: 10em 10em;
`



index.js: 

import React from 'react'
import PropTypes from 'prop-types'

import { Container } from './styles'
import { First, Middle, Finally } from '../ItemsNavBar'

export default function Navbar({ itensMenu }) {
  return (
    <Container>
      {itensMenu.map(item => {
        switch (item.position) {
          case 'level1':
            return <First key={item.label} item={item} />
          case 'level2':
            return <Middle key={item.label} item={item} />
          case 'level3':
            return <Finally key={item.label} item={item} />
          default:
            return <></>
        }
      })}
    </Container>
  )
}

Navbar.propTypes = {
  itensMenu: PropTypes.arrayOf(PropTypes.oneOfType([
    PropTypes.string.isRequired,
    PropTypes.object.isRequired,
    PropTypes.number.isRequired,
    PropTypes.number.isRequired,
    PropTypes.bool.isRequired,
    PropTypes.string.isRequired,
  ]),
  )
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
  width: 100%;
  height: 80px;
  background: #f8f8f8;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;

  .level {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
  }
`

export const Base = styled.div`
  height: 100%;
  border-top: ${props =>
    `36px solid ${
      props.active ? props.color : '#dddddd'
    }`}; /* 36px deixou a altura igual */
  border-left: 20px solid transparent;
  border-bottom: ${props =>
    `40px solid ${props.active ? props.color : '#dddddd'}`};
`

export const Corpo = styled.div`
  width: 100%;
  height: 100%;
  background: ${props => `${props.active ? props.color : '#dddddd'}`};
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex-wrap: flex-wrap;
  p {
    text-align: center;
    font-style: normal;
    font-size: 18px;
    font-weight: normal;
    letter-spacing: 0;
    color: ${props => (props.active ? '#FFFFFF' : '#707070')};
    opacity: 1;
    margin-bottom: 0vh;
  }

  .icon-navbar {
    width: ${props => `${props.width}px`};
    height: ${props => `${props.height}px`};
  }
`
export const Ponta = styled.div`
  height: 100%;
  border-top: 36px solid transparent; /* 36px deixou a altura igual */
  border-left: ${props =>
    `20px solid ${props.active ? props.color : '#dddddd'}`};
  border-bottom: 40px solid transparent;
`



index.js: 

import React, { useContext } from 'react'
import PropTypes from 'prop-types'

import Animation from '../Animation'

import { Container, ButtonBorder, BarraProgresso } from './styles'

import ConfigContext from '@/contexts/config.context'

// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'

export default function ButtonAnimated({
  iconAnimated,
  pulseAnimated,
  label,
  borderColor,
  progressColor,
  handleClick,
  selecting,
  loading,
  isStyled,
  action,
}) {
  selecting && action === 'selected' && handleClick()

  const { speedTimer } = useContext(ConfigContext)

  return (
    <>
      <Container
        background={progressColor}
        role='button'
        tabIndex={0}
        onClick={handleClick}
        onKeyPress={handleClick}
        weight={selecting}
      >
        <div className='Icon'>
          {selecting && loading && (
            <>
              <ButtonBorder border={borderColor} />
              <BarraProgresso
                speed={checkSpeedTimer(speedTimer)}
                background={progressColor}
              />
            </>
          )}
          <Animation
            data={pulseAnimated}
            isPaused={!selecting}
            size={210}
            isStyled
          />
          <Animation
            data={iconAnimated}
            isPaused={!selecting}
            size={200}
            isStyled
          />
        </div>
        <p>{label}</p>
      </Container>
    </>
  )
}

ButtonAnimated.propTypes = {
  iconAnimated: PropTypes.object.isRequired,
  pulseAnimated: PropTypes.object.isRequired,
  label: PropTypes.string.isRequired,
  borderColor: PropTypes.string.isRequired,
  progressColor: PropTypes.string.isRequired,
  handleClick: PropTypes.func,
  selecting: PropTypes.bool,
  loading: PropTypes.bool,
  isStyled: PropTypes.bool.isRequired,
  action: PropTypes.string.isRequired,
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
  width: 304px;
  height: 100%;
  margin: auto;

  .Icon {
    position: relative;
    margin: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  img {
    display: block;
    line-height: 100px;
    position: absolute;
    width: 96px;
    height: 96px;
  }

  p {
    margin: auto;
    padding: 0;
    position: relative;
    bottom: 13.2%;
    text-align: center;
    font-style: normal;
    font-size: 26px;
    font-weight: ${props => (props.weight ? 'bold' : 'normal')};
    letter-spacing: 0;
    color: #707070;
    opacity: 1;
  }

  &:active {
    background-color: ${props => props.background};
  }

  @media (max-width: 1080px) {
    .Icon {
      height: 100%;
    }

    img {
      width: ${props => `${0.6 * props.width}px`};
      height: ${props => `${0.6 * props.height}px`};
    }

    p {
      bottom: 16%;
      font-size: 22px;
    }
  }

  @media (max-width: 1080px) and (max-height: 720px) {
    .Icon {
      height: 100%;
    }
  }

  @media (max-height: 720px) {
    p {
      font-size: 18px;
    }
  }

  @media (max-width: 1275px) and (min-width: 1081px) {
    p {
      font-size: 21px;
    }
  }
`

export const ButtonBorder = styled.div`
  display: none;
  margin: auto;
  padding: 0;
  width: 100%;
  height: 102%;
  box-shadow: 0px 4px 14px #00000040;
  border-radius: 5px;
  opacity: 1;
  border: 6.5px solid ${props => props.border};
  display: block;
  /* ${Container}:hover & {
    display: block;
  } */
`

export const Circle = styled.div`
  display: block;
  line-height: 100px;
  position: absolute;
  width: ${props => `${props.size}px`};
  height: ${props => `${props.size}px`};
  background: ${props => `${props.background}`};
  opacity: 1;
  border-radius: 50%;
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;
`

export const BarraProgresso = styled.div`
  width: 0;
  height: 7px;
  padding: 0;
  margin: auto;
  margin-bottom: 5px;
  border-radius: 3px;
  background: ${props => props.background};
  position: absolute;
  bottom: 0%;
  left: 10px;
  animation-timing-function: linear;
  animation-name: loadingBar;
  animation-duration: ${props => `${props.speed}ms`};

  @keyframes loadingBar {
    from {
      width: 0;
    }
    to {
      width: calc(100% - 20px);
    }
  }
`



index.js: 

import React,{useContext,useEffect,useState} from 'react'

// import VoltarIcon from '@/assets/tv/voltar.png'
import { Container} from './styles'
import ControllerButton from '../ControllerButton'

import ConfigContext from '@/contexts/config.context'
import { GlobalContext } from '@/contexts/global.context'

import checkSpeedTimer from '@/utils/checkSpeedTimer'
import {TelevisaoVolumeActionsToContext} from '@/services/data'


export default function SoundTv(){

  const { speedTimer,changeVolModal } = useContext(ConfigContext)
  const [timer, setTimer] = useState(0)
  const globalContext = useContext(GlobalContext)

  const modifierActionNone = () => {
    globalContext.modifier(oldState => ({
      ...oldState,
      action: 'none',
    }))
  }


  /* atualiza o timer a cada 4000ms */
useEffect(() => {
  function selecting() {
    setTimer(timer + 1)
  }

  setTimeout(selecting, checkSpeedTimer(speedTimer))
}, [timer, speedTimer])




  return(
    <Container>
      <p>Volume</p>
      <div  id='content'>
      {TelevisaoVolumeActionsToContext.map(data => (
       <ControllerButton
       label = {data.label}
       value={data.value}
        /* retorna verdadeiro para o botao com a ordem do enesimo tempo correspondente */
        selecting = {
          (timer % TelevisaoVolumeActionsToContext.length) + 1 === data.order ? true : false
        }
        action={globalContext.action}
        handleClick = {(label) => {
          if (label === 'Voltar'){
            changeVolModal()
          }
          modifierActionNone()
        }}
        img = {data.iconPath}
       />
     ))

     }
      </div>


    </Container>
  )


}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
width: 50vw;
height: 80vh;
background: #F8F8F8;
padding: 2vh 0;
border:5px black;
z-index: 9999;
position:absolute;
left:25%;
display:flex;
flex-direction: column;

p{
  color: #707070;
  font-size:22px;
  font-weight:bold;
  font-family:Lato;
  margin:1vh 8%;
}
#content {
  display:grid;
  grid-template-columns:repeat(3,1fr);
  grid-template-rows: repeat(3, 1fr);
  justify-content: center;
}
.back{
  grid-column: 2;
}

`



index.js: 

import React, { useState } from 'react'
import { NewPhrases, CurrentPhrases } from './styles'

import SepeakerIcon from '../../assets/Botões/speaker.png'

export default function CheckPhrases({ label, day, phrases }) {
  const [slider, setSlider] = useState(false)
  const [cardColor, setCardColor] = useState(false)

  return (
    <>
      {label === 'newPhrases' ? (
        <NewPhrases>
          <label
            className='normalCard'
            onClick={() => setCardColor(!cardColor)}
          >
            <input type='checkbox'></input>
            <span className='checkmark'></span>
            {phrases}
            <p>{day}</p>
          </label>
          <img src={SepeakerIcon} alt=''></img>
        </NewPhrases>
      ) : (
        <CurrentPhrases>
          <label onClick={() => setCardColor(!cardColor)}>
            <input type='checkbox'></input>
            <span className='checkmark'></span>
            <img src={SepeakerIcon} alt=''></img>
            {phrases}
            <div
              class='phrases-options-button'
              onClick={() => setSlider(!slider)}
            ></div>
          </label>
          {slider && (
            <div className='phrases-options-content'>
              <p>Editar texto</p>
              <p>Alterar imagem</p>
              <p>Excluir</p>
            </div>
          )}
        </CurrentPhrases>
      )}
    </>
  )
}



styles.js: 

import styled from 'styled-components'

export const NewPhrases = styled.div`
  height: 8vh;
  display: flex;
  align-items: center;
  justify-content: space-around;
  margin: 2vh 0;
  .normalCard {
    border: 3px solid #707070;
    border-radius: 5px;
    width: 70%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    color: #707070;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    font-weight: Regular;
    font-size: 18px;
    background: #f8f8f8;
    &:hover {
      border-color: #005b8d;
      color: #005b8d;
      .checkmark {
        border-color: #005b8d;
      }
    }
  }
  .selectedCard {
    border: 3px solid #707070;
    border-radius: 5px;
    width: 70%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    color: white;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    font-weight: Regular;
    font-size: 18px;
    background: #005b8d;
  }
  p {
    margin-left: 40%;
    margin-bottom: 10%;
    font-size: 15px;
  }
  input {
    opacity: 0;
    cursor: pointer;
  }
  .checkmark {
    height: 25px;
    width: 25px;
    border: 2px solid #707070;
    opacity: 1;
    border-radius: 50%;
    margin-right: 1vw;
  }
  .checkmark-active {
    height: 25px;
    width: 25px;
    border: 2px solid #707070;
    opacity: 1;
    border-radius: 50%;
    margin-right: 1vw;
    background: white;
  }

  img {
    width: 8vh;
    height: 8vh;
    border: 2px solid #707070;
    border-radius: 100%;
    padding: 1vh;
    background: #f8f8f8;
  }
`

export const CurrentPhrases = styled.div`
  height: 13vh;
  display: flex;
  align-items: center;
  justify-content: space-around;
  margin: 2vh 0;
  position: relative;
  label {
    border: 3px solid #707070;
    border-radius: 5px;
    border-style: dashed;
    width: 80%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    color: #707070;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    font-weight: Regular;
    font-size: 18px;
    background: #f8f8f8;
    &:hover {
      border-color: #005b8d;
      color: #005b8d;
      .checkmark {
        border-color: #005b8d;
      }
    }
    input {
      opacity: 0;
      cursor: pointer;
    }
    .checkmark {
      height: 25px;
      width: 25px;
      border: 2px solid #707070;
      opacity: 1;
      border-radius: 50%;
      margin-right: 1vw;
    }
    .checkmark-active {
      height: 25px;
      width: 25px;
      border: 2px solid #707070;
      opacity: 1;
      border-radius: 50%;
      margin-right: 1vw;
      background: #005b8d;
    }
    img {
      margin-right: 1vw;
    }

    .phrases-options-button {
      margin-left: 40%;
      margin-bottom: 10%;
      width: 18px;
      height: 18px;
      border: 2px solid #707070;
      border-radius: 50%;
      &:hover {
        border-color: #005b8d;
      }
    }
  }
  .phrases-options-content {
    height: 140px;
    width: 150px;
    border: 2px solid #707070;
    position: absolute;
    left: 83%;
    top: 40%;
    border-radius: 10px;
    background: #f8f8f8;
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: left;
    justify-content: space-around;
    font-weight: Regular;
    font-size: 16px;
    color: #707070;
    p {
      margin-left: 20%;
      cursor: pointer;
    }
  }
`

export default NewPhrases



index.js: 

import React,{useContext, useEffect,useState} from 'react'




import ConfigContext from '@/contexts/config.context'
import { GlobalContext } from '@/contexts/global.context'
// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'
import {TelevisaoCanaisActionsToContext} from '@/services/data'
import ControllerButton from '../ControllerButton'

import { Container} from './styles'

export default function ChannelTv(){

const { speedTimer, changeTvModal } = useContext(ConfigContext)
const [timer, setTimer] = useState(0)
const globalContext = useContext(GlobalContext)

const modifierActionNone = () => {
  globalContext.modifier(oldState => ({
    ...oldState,
    action: 'none',
  }))
}

/* atualiza o timer a cada 4000ms */
useEffect(() => {
  function selecting() {
    setTimer(timer + 1)
  }

  setTimeout(selecting, checkSpeedTimer(speedTimer))
}, [timer, speedTimer])

  return(
    <Container>
    {/* variavel com path dos contextos   */}
    <p>Canal</p>
      <div className='channel-content'>
          {TelevisaoCanaisActionsToContext.map( data => (
            <ControllerButton
            label={data.label}
            img={data.iconPath}
            /* retorna verdadeiro para o botao com a ordem do enesimo tempo correspondente */
            selecting = {
              (timer % TelevisaoCanaisActionsToContext.length) + 1 === data.order ? true : false
            }
            action={globalContext.action}

            handleClick = {(label) => {
              if (label === 'Voltar'){
                changeTvModal()
              }
              modifierActionNone()
            }}
            />
          ))
          }
      </div>
    </Container>
  )


}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
height:65vh;
padding:0  5vw;
display:flex;
flex-direction:column;
background: #F8F8F8;
position:absolute;
z-index:999;
left:35%;
p{
  color: #707070;
  font-size:22px;
  font-weight:bold;
  font-family:Lato;
  margin:2vh 0;
}
.channel-content{
  display:grid;
  grid-template-columns:repeat(2,1fr);
  grid-template-rows: repeat(2, 1fr);
  justify-content: center;
  gap:20px;
  .back{
    grid-column: 1/-1;
  }
}

`



index.js: 

import React, { useEffect, useState } from 'react'
import Lottie from 'react-lottie'
import PropTypes from 'prop-types'
// import { render } from 'react-dom'

export default function Animation({
  data,
  isStopped,
  isPaused,
  size,
  isStyled,
}) {
  const defaultOptions = {
    loop: true,
    autoplay: true,
    animationData: data,
    rendererSettings: {
      preserveAspectRatio: 'xMidYMid slice',
    },
  }

  const [styleDefault, setStyleDefault] = useState({
    position: 'absolute',
    width: `${size}px`,
    height: `${size}px`,
    margin: 0,
  })

  useEffect(() => {
    if (window.matchMedia('(max-width: 1080px)').matches) {
      setStyleDefault(prevState => ({
        ...prevState,
        width: `${0.7 * size}px`,
        height: `${0.7 * size}px`,
      }))
    }
  }, [size])

  return (
    <Lottie
      style={isStyled && styleDefault}
      options={defaultOptions}
      isStopped={isStopped}
      isPaused={isPaused}
    />
  )
}
Animation.propTypes = {
  data: PropTypes.object.isRequired,
  isStopped: PropTypes.bool.isRequired,
  isPaused: PropTypes.bool,
  size: PropTypes.number.isRequired,
  isStyled: PropTypes.bool.isRequired,
}



Finally.js: 

import React from 'react'
import PropTypes from 'prop-types'

import { Corpo, Base } from '../Navbar/styles'

export default function Finally({
  item: { label, img, width, height, active, color },
}) {
  return (
    <div className='level'>
      <Base active={active} color={color} />
      <Corpo active={active} color={color}>
        <img
          src={active ? img[1] : img[0]}
          alt=''
          className='icon-navbar'
          width={width}
          height={height}
        ></img>
        <p>{label}</p>
      </Corpo>
    </div>
  )
}

Finally.propTypes = {
  item: PropTypes.oneOfType([
    PropTypes.string.isRequired,
    PropTypes.object.isRequired,
    PropTypes.number.isRequired,
    PropTypes.number.isRequired,
    PropTypes.bool.isRequired,
    PropTypes.string.isRequired,
  ]),
}



Middle.js: 

import React from 'react'
import PropTypes from 'prop-types'

import { Base, Corpo, Ponta } from '../Navbar/styles'

export default function Middle({
  item: { label, img, width, height, active, color },
}) {
  return (
    <div className='level'>
      <Base active={active} color={color} />
      <Corpo active={active} color={color}>
        <img
          src={active ? img[1] : img[0]}
          alt=''
          className='icon-navbar'
          width={width}
          height={height}
        ></img>
        <p>{label}</p>
      </Corpo>
      <Ponta active={active} color={color} />
    </div>
  )
}

Middle.propTypes = {
  item: PropTypes.oneOfType([
    PropTypes.string.isRequired,
    PropTypes.object.isRequired,
    PropTypes.number.isRequired,
    PropTypes.number.isRequired,
    PropTypes.bool.isRequired,
    PropTypes.string.isRequired,
  ]),
}



index.js: 

import First from './First'
import Middle from './Middle'
import Finally from './Finally'

export { First, Middle, Finally }



First.js: 

import React from 'react'
import PropTypes from 'prop-types'

import { Corpo, Ponta } from '../Navbar/styles'

export default function First({ item }) {
  return (
    <div className='level'>
      <Corpo>
        <img
          src={item.img[0]}
          alt=''
          className='icon-navbar'
          width={item.width}
          height={item.height}
        ></img>
        <p> {item.label} </p>
      </Corpo>
      <Ponta />
    </div>
  )
}

First.propTypes = {
  item: PropTypes.oneOfType([
    PropTypes.string.isRequired,
    PropTypes.object.isRequired,
    PropTypes.number.isRequired,
    PropTypes.number.isRequired,
    PropTypes.bool.isRequired,
    PropTypes.string.isRequired,
  ]),
}



index.js: 

import React from 'react'

import './style.css'

import espaco from '@/assets/Icones/escrever/espaco.png'
import apagar from '@/assets/Icones/escrever/apagar.png'
import ajuda from '@/assets/Icones/escrever/pedir-ajuda.png'
import enter from '@/assets/Icones/escrever/enter.png'
import fechar from '@/assets/Icones/escrever/fechar-teclado.png'

export default function Key(props) {
  // TODO: find a way to select dark mode for all keyboard from Keyboard component (constructor ? importing config file?)
  const dark = false
  const { char, hovered, enabled, timeProgress } = props

  let icon = ''

  if (char === 'Espaço') {
    icon = <img src={espaco} height='' alt='' />
  } else if (char === 'Apagar') {
    icon = <img src={apagar} height='' alt='' />
  } else if (char === 'Enter') {
    icon = <img src={enter} height='' alt='' />
  } else if (char === 'Voltar' || char === 'Voltar1') {
    icon = <img src={fechar} height='25px' alt='' />
  } else if (char === 'Ajuda') {
    icon = <img src={ajuda} height='25px' alt='' />
  }

  let text = char

  if (text === 'Voltar1') text = 'Voltar'

  return (
    <div
      className={`
        key-button
        ${dark ? 'dark' : ''}
        ${hovered ? 'hovered' : ''}
        ${!enabled ? 'disabled' : ''}
        ${char === 'Espaço' ? 'space' : ''}
        ${char === 'Apagar' ? 'two-key' : ''}
        ${char === 'Apaga tudo' ? 'two-key two-words' : ''}
        ${char === 'Enter' ? 'two-key' : ''}
        ${char === 'Voltar' ? 'two-key' : ''}
        ${char === 'Voltar1' ? 'two-key' : ''}
        ${char === 'Ajuda' ? 'two-key' : ''}
        ${char === '#!@' ? 'key_Special' : ''}
       
      `}
    >
      <div className='button-text'>
        {icon} {text}
      </div>

      {/* adds div with progress bar when scanner is over it */}
      {hovered ? <div className='progresso' style={{animationDuration: timeProgress }} /> : ''}
    </div>
  )
}




index.js: 

import React from 'react'
import PropTypes from 'prop-types'
import Animation from '@/components/Animation'

import { Container, BarContainer } from './style'

export default function CheckCard({
  currentValue,
  changeValue,
  title,
  labels,
  imgs,
  iconDimensions,
}) {
  return (
    <Container>
      {title && <h1>{title}</h1>}
      <div className='check-box'>
        <div>
          <div className='check-container'>
            <form>
              {labels.map((label, idx) => (
                <label key={idx} className='check-line'>
                  <span
                    className={
                      currentValue === label ? 'checkmark-active' : 'checkmark'
                    }
                    onClick={() => changeValue(label)}
                  ></span>
                  <p>{label}</p>

                  {iconDimensions.length > 2 ? (
                    <div className='bar-container'>
                      <BarContainer key={idx} width={iconDimensions[idx]}>
                        <div className='border'></div>
                        <div className='load'></div>
                      </BarContainer>
                    </div>
                  ) : (
                    imgs && (
                      <div className='bar-container'>
                        <Animation data={imgs[idx]} size={70} isStyled />
                      </div>
                    )

                    //as imagens do arry nao estao alternando
                  )}
                </label>
              ))}
            </form>
          </div>
        </div>
      </div>
    </Container>
  )
}

CheckCard.propTypes = {
  title: PropTypes.string.isRequired,
  labels: PropTypes.array.isRequired,
  imgs: PropTypes.array,
  iconDimensions: PropTypes.array.isRequired,
}



style.js: 

import styled from 'styled-components'

export const Container = styled.div`
  width: 78%;

  h1 {
    text-align: left;
    font-weight: Bold;
    font-size: 27px;
    letter-spacing: 0;
    color: #005b8d;
    opacity: 1;
  }
  .check-box {
    width: 100%;
    height: 100%;
    margin: 1% 0 2% 0;

    div {
      display: flex;
      flex-direction: row;

      .check-container {
        width: 100%;
        height: 165px;
        background: #e6eef2;
        border-radius: 5px;
        opacity: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: flex-start;

        form {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }

        .check-line {
          display: flex;
          flex-direction: row;
          align-items: center;
          position: relative;
          padding: 0;
          margin: 1vh 1vh;
          cursor: pointer;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
          user-select: none;
          font-weight: Regular;
          font-size: 27px;
          letter-spacing: 0;
          color: #707070;
          opacity: 1;

          p {
            margin-left: 1vw;
          }

          .animation-content {
            margin-bottom: 5vh;
            width: 60px;
          }

          input {
            opacity: 0;
            cursor: pointer;
          }

          .checkmark {
            height: 30px;
            width: 30px;
            border: 2px solid #707070;
            opacity: 1;
            border-radius: 50%;
          }

          .checkmark-active {
            height: 30px;
            width: 30px;
            border: 2px solid #707070;
            opacity: 1;
            border-radius: 50%;
            background: #005b8d;
          }

          .checkmark:after {
            top: 3px;
            left: 3px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #005b8d;
          }
        }
      }

      .bar-container {
        height: 165px;
        display: flex;
        margin: 0 0 0 45px;
        padding: 0;
        position: absolute;
        left: 23%;
        flex-direction: column;
        justify-content: center;
        align-content: center;
      }
    }
  }
`
export const BarContainer = styled.div`
  margin: 18px 0;
  .border {
    width: 168px;
    height: 16px;
    border: 2px solid #707070;
    border-radius: 5px;
    opacity: 1;
    margin: 0;
    padding: 0;
  }
  .load {
    width: ${props => `${props.width}px`};
    height: 12px;
    position: absolute;
    background: #005b8d;
    border-radius: 4px;
    opacity: 1;
    margin: 2px 0 2px 2px;
  }
`



index.js: 

import React, { useContext, useEffect} from 'react'
import PropTypes from 'prop-types'

import mqttPublish from '@/utils/mqttPublish'
import checkSpeedTimer from '@/utils/checkSpeedTimer'
import ConfigContext from '@/contexts/config.context'

import {BarraProgresso} from '@/components/Button/styles'
import { Container} from './styles'




export default function ControllerButton({value,label,img, selecting, action, handleClick}){

  const { speedTimer } = useContext(ConfigContext)

  const jsonMessage = (topic) => {

    let message = {
      tag: 'TV',
      count: value ? Math.abs(value) : 1,
      //ess logica não funciona para todos os botoes do modal de canais
      cmd: `${value ? (label === 'Aumentar' ? '["volp"]':'["volm"]') :  (label === 'Aumentar' ? '["chp"]':'["chm"]')}`
    }
    mqttPublish(topic,message)
  }

  // eslint-disable-next-line
  const clickEvent = () => {
    jsonMessage('controladores')
    handleClick(label)
  }


  useEffect (()=> {
    if (selecting && action === 'selected'){
      clickEvent()
    }
  // eslint-disable-next-line
   },[action, selecting]);

  return(
    <Container borderColor={selecting ? '#245365': '#707070'} onClick={() => clickEvent()} className={label==='Voltar' ? 'button back' :'button sound'}>
      <div className='box-content'  >
        {typeof value==='number' ?
        Math.sign(value)===1 ? <p>+{value}</p> : <p>{value}</p>
        :
        <img src={img} style={{width: "35px", height:"23px"}} alt=''/>
        }
        {selecting && <BarraProgresso  speed={checkSpeedTimer(speedTimer)} background='#245365'/>}
      </div>
     <p className='label-modal-buttons'>{label}</p>

    </Container>
  )


}

ControllerButton.propTypes={
  label: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
display:flex;
flex-direction:column;
align-items:center;
justify-content:center;
cursor:pointer;


.box-content{
  width:120px;
  height:120px;
  display:flex;
  align-items:center;
  justify-content:center;
  border: 2px solid;
  border-color: ${props => `${props.borderColor}`};
  border-radius: 4px;
  box-shadow: 0px 3px 4px #00000029;
  position:relative;
  p{
    color: #245365;
    font-weight:bold;
    font-family:Lato;
    font-size:30px;
  }

}
.label-modal-buttons{
  color: #707070;
  font-weight:normal;
  font-family:Lato;
  font-size:14px;
  margin-top:1vh;
}
`








index.js: 

import React, { useContext, useState, useEffect } from 'react'
import PropTypes from 'prop-types'

import ConfigContext from '@/contexts/config.context'

// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'

import mqttPublish from '@/utils/mqttPublish'
import {
  Container,
  ButtonBorder,
  Circle,
  BarraProgresso,
  ToggleButton,
  ChannelButton,
  AcButton,
} from './styles'

export default function Button({
  icon,
  activeIcon,
  label,
  borderColor,
  b1,
  b2,
  b3,
  widthSize,
  heightSize,
  handleClick,
  selecting,
  action,
  buttontype,
  content,
  currentContext,
}) {
  const {
    speedTimer,
    changeTvModal,
    changeVolModal,
    tvModal,
    volModal,
    tomadaOnOff,
    lampadaOnOff,
    changeSalaLampada,
    changeSalaTamada,
    prosthesesOpenClosed,
    changeProstheses,
  } = useContext(ConfigContext)
  const [onOffStatus, setOnOffStatus] = useState(temp())

  const jsonMessage = (topic, comand, tag) => {
    const message = {
      tag: `${tag.normalize('NFD').replace(/[\u0300-\u036f]/g, '')}`,
      cmd: `${comand}`,
    }
    console.log(topic, message)
    mqttPublish(topic, message)

    return message
  }
  // função temporaria para guardar os status das lampadas é tomodas
  function temp() {
    if (label === 'Lâmpada') {
      return lampadaOnOff
    }
    // eslint-disable-next-line no-else-return
    else if (label === 'Tomada') {
      return tomadaOnOff
    } else if (label === 'Prótese') {
      return prosthesesOpenClosed
    } else {
      return false
    }
  }

  const onOffControl = () => {
    if (label === 'Lâmpada') {
      changeSalaLampada()
    } else if (label === 'Tomada') {
      changeSalaTamada()
    } else if (label === 'Prótese') {
      changeProstheses()
    }

    const message = onOffStatus ? 'off' : 'on'
    setOnOffStatus(!onOffStatus)
    return message
  }

  const clickEvent = () => {
    switch (buttontype) {
      case 'toggle':
        jsonMessage('controladores', onOffControl(), label)
        break
      case 'TvChannel':
        changeTvModal()

        break
      case 'TvVolume':
        changeVolModal()
        break
      case 'ac':
        jsonMessage('controladores', `["${label}"]`, 'ArCondicionado')
        break
      default:
        return handleClick()
    }

    switch (label) {
      case 'Mudo':
        jsonMessage('controladores', '["mute"]', 'TV')

        break
      case 'Desligar':
          if (currentContext === 'ar-condicionado') {
              jsonMessage(
                'controladores',
                `["off"]`,
                'ArCondicionado'
              )
          }
        break
      case 'Ligar/Desligar':
        // fazer codigo generalizado
        if (currentContext === 'controladores'){
          jsonMessage('controladores', `["${onOffControl()}"]`, 'TV')
        }
        break
      default:
        return handleClick()
    }
  }

  useEffect(() => {
    const modalIsNotActive = !volModal && !tvModal
    const blinkActive = selecting && action === 'selected'

    // eslint-disable-next-line no-unused-expressions
    modalIsNotActive && blinkActive && clickEvent()
    // eslint-disable-next-line
  }, [action])

  return (
    <>
      <Container
        className={label.replace(/\s/g, '')}
        background={b3}
        role='button'
        tabIndex={0}
        onClick={() => clickEvent()}
        onKeyPress={handleClick}
        weight={selecting}
        width={widthSize}
        height={heightSize}
      >
        {buttontype === 'toggle' && (
          <ToggleButton slider={onOffStatus ? 30 : 0}>
            <p className={onOffStatus ? 'active' : 'disable'}>
              {label === 'Prótese' ? 'Fechada' : 'Desligado'}
            </p>

            <div className='switch__container' onClick={() => onOffControl()}>
              <input
                id='switch-shadow'
                className='switch switch--shadow'
                type='checkbox'
              />
              <label htmlFor='switch-shadow' />
            </div>
            <p className={!onOffStatus ? 'active' : 'disable'}>
              {' '}
              {label === 'Prótese' ? 'Aberta' : 'Ligada'}
            </p>
          </ToggleButton>
        )}
        {(buttontype === 'TvChannel' || buttontype === 'TvVolume') && (
          <ChannelButton>
            <p>Última ação</p>
            <div>canal</div>
          </ChannelButton>
        )}
        {buttontype === 'ac' && <p className='group-title'>{label}</p>}
        <div className='Icon'>
          {selecting && (
            <>
              <ButtonBorder border={borderColor} />
              <BarraProgresso
                speed={checkSpeedTimer(speedTimer)}
                background={b3}
              />
            </>
          )}
          {buttontype === 'TvChannel' ||
          buttontype === 'TvVolume' ||
          buttontype === 'ac' ? (
            <>
              <Circle background={b3} size={120} />
              <Circle background={b2} size={111} />
              <Circle background={b1} size={111} />
              <img src={icon} alt='' className='button-icon' />
            </>
          ) : (
            <>
              <Circle background={b3} size={155} />
              <Circle background={b2} size={140.29} />
              <Circle background={b1} size={126.78} />
              <img
                src={onOffStatus ? activeIcon : icon}
                alt=''
                className='button-icon'
              />
            </>
          )}
        </div>
        {buttontype === 'ac' ? (
          <AcButton>
            <p>{content.temperature}°</p>
            <img className='vento' src={content.airvelocity} alt='' />
            <img className='modo' src={content.mode} alt='' />
          </AcButton>
        ) : (
          <p>{label}</p>
        )}
      </Container>
    </>
  )
}

Button.propTypes = {
  icon: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  borderColor: PropTypes.string.isRequired,
  b1: PropTypes.string.isRequired,
  b2: PropTypes.string.isRequired,
  b3: PropTypes.string.isRequired,
  handleClick: PropTypes.func,
  selecting: PropTypes.bool,
  action: PropTypes.string.isRequired,
  buttontype: PropTypes.string.isRequired,
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
  width: 304px;
  height: 100%;
  margin: auto;
  position: relative;
  .Icon {
    position: relative;
    margin: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  img {
    display: block;
    line-height: 100px;
    position: absolute;
    width: ${props => `${props.width}px`};
    height: ${props => `${props.height}px`};
  }

  p {
    margin: auto;
    padding: 0;
    position: relative;
    bottom: 13.2%;
    text-align: center;
    font-style: normal;
    font-size: 26px;
    font-weight: ${props => (props.weight ? 'bold' : 'normal')};
    letter-spacing: 0;
    color: #707070;
    opacity: 1;
  }

  .group-title {
    position: absolute;
    left: 36%;
    top: 5%;
  }

  &:active {
    background-color: ${props => props.background};
  }

  @media (max-width: 1080px) {
    .Icon {
      height: 100%;
    }

    img {
      width: ${props => `${0.6 * props.width}px`};
      height: ${props => `${0.6 * props.height}px`};
    }

    p {
      bottom: 16%;
      font-size: 22px;
    }
  }

  @media (max-width: 1080px) and (max-height: 720px) {
    .Icon {
      height: 100%;
    }
  }

  @media (max-height: 720px) {
    p {
      font-size: 18px;
    }
  }
`

export const ButtonBorder = styled.div`
  display: none;
  margin: auto;
  padding: 0;
  width: 100%;
  height: 102%;
  box-shadow: 0px 4px 14px #00000040;
  border-radius: 5px;
  opacity: 1;
  border: 6.5px solid ${props => props.border};
  display: block;
  /* ${Container}:hover & {
    display: block;
  } */
`

export const Circle = styled.div`
  display: block;
  line-height: 100px;
  position: absolute;
  width: ${props => `${props.size}px`};
  height: ${props => `${props.size}px`};
  background: ${props => `${props.background}`};
  opacity: 1;
  border-radius: 50%;
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;

  @media (max-width: 1080px) {
    width: ${props => `${0.6 * props.size}px`};
    height: ${props => `${0.6 * props.size}px`};
    background: ${props => `${0.6 * props.background}`};
  }
`

export const BarraProgresso = styled.div`
  width: 0;
  height: 8px;
  padding: 0;
  margin: auto;
  margin-bottom: 5px;
  border-radius: 3px;
  background: ${props => props.background};
  position: absolute;
  bottom: 0%;
  left: 5%;
  animation-timing-function: linear;
  animation-name: loadingBar;
  animation-duration: ${props => `${props.speed}ms`};

  @keyframes loadingBar {
    from {
      width: 0%;
    }
    to {
      width: 90%;
    }
  }
`

export const ToggleButton = styled.div`
  width: 100%;
  height: 28px;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 3%;
  right: 2%;

  .active {
    font-size: 14px;
    color: #707070;
  }

  .disable {
    font-size: 14px;
    color: #4a788a;
  }

  .switch__container {
    margin: 0 2vw;
    width: 60px;
  }

  .switch {
    visibility: hidden;
    position: absolute;
    margin-left: -9999px;
  }

  .switch + label {
    display: block;
    position: relative;
    cursor: pointer;
    outline: none;
    user-select: none;
    width: 60px;
  }

  .switch--shadow + label {
    padding: 2px;
    width: 60px;
    height: 30px;
    background-color: #dddddd;
    border-radius: 30px;
  }
  .switch--shadow + label:before,
  .switch--shadow + label:after {
    display: block;
    position: absolute;
    top: 0px;
    left: 0px;
    bottom: 0px;
    content: '';
  }

  .switch--shadow + label:after {
    width: 30px;
    background-color: #fff;
    border-radius: 100%;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    transition: all 0.4s;
  }

  .switch--shadow + label:after {
    transform: translateX(${props => `${props.slider}px`});
  }
`

export const ChannelButton = styled.div`
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 1%;
  p {
    font-size: 16px;
    color: #245365;
  }

  div {
    width: 140px;
    height: 30px;
    background: #f8f8f8 0% 0% no-repeat padding-box;
    border: 2px solid #245365;
    border-radius: 15px;
    display: flex;
    justify-content: center;
    font-family: Lato;
    align-items: center;
    color: #4a788a;
    font-weight: bold;
    font-size: 18px;
  }
`
export const AcButton = styled.div`
  width: 215px;
  height: 35px;
  border: 2px solid #245365;
  border-radius: 24px;
  display: flex;
  flex-direction: row;
  align-items: center;
  padding-top: 1vh;
  justify-content: space-around;
  position: absolute;
  left: 15%;
  top: 78%;

  p {
    font-size: 22px;
    margin-right: 145px;
  }

  .vento {
    margin-bottom: 7px;
  }

  .modo {
    width: 35px;
    height: 35px;
    margin-left: 145px;
    margin-bottom: 7px;
  }
`



index.js: 

import React, { useState, useEffect, useContext } from 'react'
import PropTypes from 'prop-types'

import iconFalar from '@/assets/Icones/escrever/falar.png'
import keyboardAPI from '@/services/keyboard-api'
import Key from '@/components/Key'

import ConfigContext from '@/contexts/config.context'

import './style.css'

let isRegionSelected = false

export default function Keyboard({ history, detection, resetDetection }) {
  const { layoutTeclado } = useContext(ConfigContext)
 // layout padrão: frequencia
 let keys = [
  'Voltar1','Espaço', 'Apagar',
  'a', 'e', 'o', 's', 'r', 'i', 'n', 'd', 'm', 'u', 't', 'c', 'l',
  'p', 'v', 'g', 'h', 'q', 'b', 'f', 'z', 'j', 'x', 'k', 'w', 'y',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ',', '.', '?',
  'Apaga tudo', '#!@', 'Enter', 'Voltar', 'Ajuda'
];

if (layoutTeclado === 'alfabético') {
  keys = [
    'Voltar1','Espaço', 'Apagar',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ',', '.', '?',
    'Apaga tudo', '#!@', 'Enter', 'Voltar', 'Ajuda'
  ];
}

if (layoutTeclado === 'qwerty') {
  keys = [
    'Voltar1','Espaço', 'Apagar',
    'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '7', '8', '9',
    'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', '?', '4', '5', '6',
    'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '0', '1', '2', '3',
    'Apaga tudo', '#!@', 'Enter', 'Voltar', 'Ajuda'
  ];
}

  const totalKeys = keys.length
  const [enabledKeys, setEnabledKeys] = useState(Array(totalKeys).fill(true))
  const [timer, setTimer] = useState(-1)
  const [text, setText] = useState('')
  const [selectedKeyIndex, setSelectedKeyIndex] = useState(-1)
  const [selectedRegionIndex, setSelectedRegionIndex] = useState(3)
  const [numSelection, setNumSelection] = useState(1)
  const [isTalking, setIsTalking] = useState(false)

  const [predictedWords, setPredictedWords] = useState([])
  // const [mostUsedArray, setMostUsedArray] = useState([])
  const [selectedWordIndex, setSelectedWordIndex] = useState(-1)

  // delta time. If changed, need to change also in key/style.css -> progresso->animation-duration
  const dt = 2
  const numColumns = 13
  const linearScan = false

  const mostUsedWords = []

 
  

  // set the index of the selected key according to scanning type (linear/row-column)
  function setNextKeyboardKey() {
    if (!isTalking) {
      setSelectedKeyIndex(timer % totalKeys) // linear scanning
      if (!linearScan) {
        // row-column scanning
        if (selectedKeyIndex > 2) {
          // if hoveredKey is NEITHER space or backspace
          if (numSelection > 1) {
            // if it's first selection goes linear, if it's second selection goes by column
            setSelectedKeyIndex(selectedKeyIndex + numColumns)

            // change the selection according to letter of first row to select proper key in the last row
            if (selectedKeyIndex === 29)
              // key 1
              setSelectedKeyIndex(42)
            // Apaga tudo
            else if (selectedKeyIndex === 30)
              // key 2
              setSelectedKeyIndex(42)
            // Apaga tudo
            else if (selectedKeyIndex === 31)
              // key 3
              setSelectedKeyIndex(43)
            // #!@
            else if (selectedKeyIndex === 32)
              // key 4
              setSelectedKeyIndex(44)
            // Enter
            else if (selectedKeyIndex === 33)
              // key 5
              setSelectedKeyIndex(44)
            // Enter
            else if (selectedKeyIndex === 34)
              // key 6
              setSelectedKeyIndex(45)
            // Apaga
            else if (selectedKeyIndex === 35)
              // key 7
              setSelectedKeyIndex(45)
            // Apaga
            else if (selectedKeyIndex === 36)
              // key 8
              setSelectedKeyIndex(46)
            // Ajuda
            else if (selectedKeyIndex === 37)
              // key 9
              setSelectedKeyIndex(46) // Ajuda
          } else if (selectedKeyIndex >= 15) {
            // selection is on the last key from 2nd column, with numSelection == 1
            setSelectedKeyIndex(0)
            setTimer(0)
          }
        }
        // scanner reaches last key of the selected column
        if (selectedKeyIndex > totalKeys + 3 - numColumns) {
          setSelectedKeyIndex(0)
          setNumSelection(1)
          setTimer(0)
        }
      }
    }
  }

  function resetScanner() {
    isRegionSelected = false
    setTimer(-1)
    setSelectedKeyIndex(-1)
    setNumSelection(1)
    setSelectedWordIndex(-1)
    setSelectedRegionIndex(0)
    setPredictedWords([])
  }

  function setNextWord(type) {
    if (type === 'predict') {
      if (selectedWordIndex === predictedWords.length - 1) {
        resetScanner()
        return
      }
      setSelectedWordIndex(timer % predictedWords.length)
    }
    if (type === 'mostUsed') {
      if (selectedWordIndex === mostUsedWords.length - 1) {
        resetScanner()
        return
      }
      setSelectedWordIndex(timer % mostUsedWords.length)
    }
  }

  // apply disabled style to all letters in the array. Array is gotten from back-end
  async function disableKeys() {
    const enabledAllKeys = Array(totalKeys).fill(true)

    // set all keys to enable is space is pressed (new word)
    const char = keys[selectedKeyIndex].toLowerCase()

    try {
      // request to keyboard API. Response stored in variable
      const response = await keyboardAPI.api.get(`negated/${char}`)
      // teclas_negadas list from response stored in variable
      const teclasNegadas = response.data.teclas_negadas
      // loop through all list elements to apply disable key
      teclasNegadas.forEach(element => {
        const index = keys.indexOf(element)
        if (index > numColumns + 2 || linearScan) enabledAllKeys[index] = false
        setEnabledKeys(enabledAllKeys)
      })
    } catch (err) {
      // TODO: realizar tratamento de erros
    }
  }

  async function predictWords(actualWord) {
    try {
      // api request to word prediction
      const prediction = await keyboardAPI.api.get(
        `prediction/${actualWord.toLowerCase()}`
      )
      setPredictedWords(prediction.data.predictions)
    } catch (err) {
      // TODO: realizar tratamento de erros
    }
  }

  const falar = async () => {
    setIsTalking(true)
    const options = {
      headers: { 'Content-Type': 'application/json' },
      responseType: 'blob',
    }
    try {
      const response = await keyboardAPI.api.post(
        // `tts2`, // offline tts
        `tts`, // google tts
        { texto: text },
        options
      )
      const mp3 = new Blob([response.data], { type: 'audio/mp3' })
      const url = window.URL.createObjectURL(mp3)
      const audio = new Audio(url)
      audio.play()
      setIsTalking(false)
    } catch (err) {
      setIsTalking(false)
      resetScanner()
      // TODO: handle error
    }
  }

  // add hovered character to input field (or go to column selection) and reset timer
  // TODO: remove code repetition
  function addToInput() {
    const char = keys[selectedKeyIndex]
    let newWord = ''

    if (char === 'Apagar') {
      newWord = text.slice(0, -1)
      setText(newWord)
      setEnabledKeys(Array(totalKeys).fill(true))
      resetScanner()
      return
    }
    if (char === 'Espaço') {
      newWord = `${text} `
      setText(newWord)
      setEnabledKeys(Array(totalKeys).fill(true))
      setPredictedWords([])
      resetScanner()
      return
    }
    if (char === 'Enter') {
      newWord = `${text}\n`
      setText(newWord)
      setEnabledKeys(Array(totalKeys).fill(true))
      setPredictedWords([])
      resetScanner()
      return
    }
    if (char === 'Voltar' || char === 'Voltar1') {
      history.goBack()
    }
    if (char === 'Ajuda') {
      history.push('/actions/preciso-de-ajuda')
    }
    if (char === 'Apaga tudo') {
      setText('')
      setEnabledKeys(Array(totalKeys).fill(true))
      setPredictedWords([])
      resetScanner()
      return
    }
    // TODO: retirar codigo - INICIO
    // feito pro MVP
    if (char === '#!@' || char === 'ABC') {
      resetScanner()
      return
    }

    // retirar codigo - FIM

    newWord = text + char

    // does not put newWord into textarea ONLY if it's not linear scan AND first selection
    if (!linearScan && numSelection === 1) {
      setTimer(0)
      setNumSelection(2)
      setTimer(timer) // repeat scanning on the same key
      return
    }
    if (!linearScan && numSelection === 2) {
      // setText(newWord);
      setNumSelection(1)
    }

    // effectivelly stores new Word
    setText(newWord)
    resetScanner()

    // call function to handle letters to be excluded from keyboard
    disableKeys()
  }

  function addWordToInput(type) {
    if (type === 'mostUsed') {
      setText(`${text} ${mostUsedWords[selectedWordIndex]} `)
      resetScanner()
    } else {
      const txtArray = text.split(' ')
      txtArray.pop()
      txtArray.push(`${predictedWords[selectedWordIndex][0]} `)
      const newText = txtArray.join(' ')
      setText(newText)
      setEnabledKeys(Array(totalKeys).fill(true))
      resetScanner()
    }
  }

  function handleSelections() {
    if (!isRegionSelected) {
      isRegionSelected = true
      setTimer(0)
      // região de predição
      if (selectedRegionIndex === 1) {
        setSelectedWordIndex(0)
      }
      // região de palavras mais usadas
      else if (selectedRegionIndex === 2) {
        setSelectedWordIndex(0)
      }
      // região do teclado
      else if (selectedRegionIndex === 3) {
         
        setSelectedKeyIndex(0)
      }
    } else if (isRegionSelected) {
      if (selectedRegionIndex === 1) {
        addWordToInput('predict')
      } else if (selectedRegionIndex === 2) {
        addWordToInput('mostUsed')
      } else if (selectedRegionIndex === 3) {
        addToInput()
      }
    }
  }

  // função a ser executada na ação da piscada
  function keySelected() {
    resetDetection()
    // setTimeout(addToInput, 1)
    setTimeout(handleSelections, 1)
  }

  // detecta tecla espaço pressionada (simular piscada)
  /** 
  function downHandler(e) {
    if (e.keyCode === 32) {
      // addToInput()
      keySelected()
    }
  }
  */

  // detecção da piscada
  detection === 'selected' && keySelected()

  // check for changes in selectedKey and goes to next key if it is disabled
  // adds and update event listeners to detect blink (space key for now) and get the value of selectedKeyIndex
  useEffect(() => {
    if (!enabledKeys[selectedKeyIndex]) {
      setTimer(timer + 1) // updates timer to toggle scanner key change
    }
    /*
    // window.addEventListener('keydown', downHandler)
    // return () => window.removeEventListener('keydown', downHandler)
    */
    
    // eslint-disable-next-line
  }, [selectedKeyIndex])

  /*
  useEffect(() => {
     window.addEventListener('keydown', downHandler)
     return () => window.removeEventListener('keydown', downHandler)
    // eslint-disable-next-line
  }, [selectedWordIndex])
*/
  useEffect(() => {
    // scanner pular fala quando o texto estiver vazio
    if(selectedRegionIndex === 0 && text.length === 0){
      setSelectedRegionIndex(3)
      setTimer(0)
      isRegionSelected = true
      setSelectedKeyIndex(0 % totalKeys)
      
    }else{
    // scanner pula regiões das palavras se estiverem vazias
    if (selectedRegionIndex === 1 && predictedWords.length === 0)
      setTimer(timer + 1)
    if (selectedRegionIndex === 2 && mostUsedWords.length === 0)
      setTimer(timer + 1)
    }
    // eslint-disable-next-line
  }, [selectedRegionIndex])

  console.log(timer)

/*   useEffect(() => {
    setSelectedRegionIndex(3)
    handleSelections()
// eslint-disable-next-line
}, [])  */

  // executes it when timer changes (every dt seconds)
  // increase timer by dt seconds and set the index of the selected key according to scanning type (linear/row-column)
  useEffect(() => {
   
    const temporizador = setTimeout(() => setTimer(timer + 1), dt * 1000) // updates timer
    if (isRegionSelected && selectedRegionIndex === 0) falar()
    // atualiza scanner do teclado quando região do teclado está selecionada
    else if (isRegionSelected && selectedRegionIndex === 1)
      setNextWord('predict')
    // atualiza scanner do teclado quando região do teclado está selecionada
    else if (isRegionSelected && selectedRegionIndex === 2)
      setNextWord('mostUsed')
    // atualiza scanner do teclado quando região do teclado está selecionada
    else if (isRegionSelected && selectedRegionIndex === 3) setNextKeyboardKey() // atualiza scanner do teclado quando região do teclado está selecionada
    if (!isRegionSelected) setSelectedRegionIndex(timer % 4) // escaneia cada uma das 4 regiões caso nenhuma região tenha sido selecionada
    
    return () => clearTimeout(temporizador)

    // eslint-disable-next-line
  }, [timer])



  

  // call function to predict words from backend
  useEffect(() => {
    // check for empty textbox and adjust text to always be accepted by predctWords function (eliminates \n)
    if (text !== '') {
      const array = text.replace('\n', ' ').split(' ')
      const actualWord = array[array.length - 1]
      predictWords(actualWord)
    }
  }, [text])

  useEffect(() => {
    if (isTalking === false) {
      resetScanner()
    }
  }, [isTalking])

  


  // TODO: enables/disables dark mode
  // const dark = false;
  return (
    <div className='container'>
      <div className='words-container'>
        <textarea readOnly value={text} />
        <div
        onClick={() => {}}
          className={`talk-button ${
            !isRegionSelected && selectedRegionIndex === 0 ? 'isHovered' : ''
          }`}
          onClick={falar}
        >
          <img src={iconFalar} alt='' />
          <div>FALAR</div>
        </div>
      </div>

      <div className='prediction-and-words-wrapper'>
        <div
          className={`
            prediction-only ${
              !isRegionSelected && selectedRegionIndex === 1 ? 'isHovered' : ''
            }
          `}
        >
          {predictedWords.map((key, index) => (
            <div
              className={`
              predict-word2 ${
                selectedRegionIndex === 1 && selectedWordIndex === index
                  ? 'isHovered'
                  : ''
              }
              `}
              key={index.toString()}
            >
              {key[0]}
            </div>
          ))}
        </div>
      </div>

      <div
        className={`keyboard-container ${
          !isRegionSelected && selectedRegionIndex === 3 ? 'isHovered' : ''
        }`}
      >
        {keys.map((key, index) => (
          <Key
            key={index.toString()}
            id={index}
            char={key}
            hovered={index === selectedKeyIndex}
            enabled={enabledKeys[index]}
            timeProgress={`${dt}s`}
          />
        ))}
      </div>
      {/*
      <Popup
        trigger={<button type='button' className='button'> Open Modal </button>}
        modal
        closeOnDocumentClick
      >
        <span> Modal content </span>
      </Popup>
      */}
      {/* <KeyboardPopup keys={keys} /> */}
    </div>
  )
}

Keyboard.propTypes = {
  history: PropTypes.object.isRequired,
  detection: PropTypes.string.isRequired,
  resetDetection: PropTypes.func.isRequired,
}



useEyeTrackingSocket.js: 

import { useCallback, useEffect, useRef, useState } from 'react'
import ACTION from '@/types/Action'
import CAMERA_STATUS from '@/types/CameraStatus'
import EyeTrackingSocketService from '@/services/EyeTrackingSocketService'

function useEyeTrackingSocket() {
  const [data, setData] = useState({
    action: ACTION.NONE,
    cameraStatus: CAMERA_STATUS.DISABLED,
  })

  const eyeTrackingSocketServiceRef = useRef(EyeTrackingSocketService)

  const onDetection = useCallback(
    res => {
      if (res.Action !== data.action) {
        
        setData({ ...data, action: res.Action, cameraStatus:res.cameraStatus })
      }
    },
    [data]
  )

  const onCameraStatusChange = useCallback(
    res => {
      if (res.cameraStatus !== data.cameraStatus) {
        
        setData({ ...data, cameraStatus: res.cameraStatus })
      }
    },
    [data]
  )

  
  useEffect(() => {
    if (eyeTrackingSocketServiceRef.current.socket == null) {
     eyeTrackingSocketServiceRef.current.connect()
   
    }
    
    eyeTrackingSocketServiceRef.current.addOnDetectionListener(onDetection)
    eyeTrackingSocketServiceRef.current.addCameraStatusListener(
      onCameraStatusChange
    )
    
  }, [eyeTrackingSocketServiceRef, onCameraStatusChange, onDetection])
   

  return data
}

export default useEyeTrackingSocket



index.js: 

import Home from './Home'
import Initial from './Initial'
import Write from './Write'
import Context from './Context'
import Action from './Action'

export { Initial, Home, Context, Write, Action }



index.js: 

// import React, { useState, useEffect } from 'react';
import React, { useContext } from 'react'

import './styles.css'

// import components
import { ContainerContexts } from '@/styles/components'
import Keyboard from '@/components/Keyboard'
// import Key from '../../components/Key';
// import KeyboardAggregation from '@/components/KeyboardAggregation';

// import { WriteActionsToContext } from '@/services/data';
// import { NavigationTo } from '@/utils/navigationWithClickSound';

// import Button from '@/components/Button';

// import assets
// import WriteIcon from '@/assets/Breadcrumb/icone-escrever.png'
// import AudioIcon from '@/assets/Breadcrumb/audio.png'
// import HelpIcon from '@/assets/Icones/ajuda/ajuda.png';
// import PrecisoDeAjudaFem from '@/assets/Voz-feminina/Preciso-de-ajuda.mpeg'
// import PrecisoDeAjudaMasc from '@/assets/Voz-masculina/Preciso-de-ajuda.mp3'
// import NavBar from '../../components/Navbar'
// import SelectedAudioIcon from '../../assets/Breadcrumb/audio-branco.png'

import { GlobalContext } from '@/contexts/global.context'

export default function Write({ history }) {
  // define breadcrumb objects

  const globalContext = useContext(GlobalContext)

  const modifierActionNone = () => {
    globalContext.modifier(oldState => ({
      ...oldState,
      action: 'none',
    }))
  }

  /* const itens = [
    {
      label: 'Teclado',
      position: 'level1',
      img: [WriteIcon],
      width: 40,
      height: 40,
    },
    {
      label: '',
      position: 'level3',
      img: [AudioIcon, SelectedAudioIcon],
      width: 40,
      height: 40,
      color: '#A3592D',
      active: true,
    },
  ] */

  // const precisoDeAjuda = {
  //   id: 0,
  //   order: 6,
  //   path: '/actions/preciso-de-ajuda/play',
  //   label: 'Preciso de ajuda',
  //   iconPath: HelpIcon,
  //   soundMale: PrecisoDeAjudaMasc,
  //   soundFemale: PrecisoDeAjudaFem,
  //   backgroundColorOne: '#fbbebf',
  //   backgroundColorTwo: '#f89e9e',
  //   backgroundColorThree: '#f67d7e',
  //   borderColor: '#ae292a',
  //   style: {
  //     // marginLeft: '100px',
  //     float: 'right',
  //   },
  // };

  // const [timer, setTimer] = useState(0)

  // Quantidade de ações na tela
  // const actionToContextCount = WriteActionsToContext.length
  // const indexActionResult = timer % actionToContextCount
  // const audioActionCurrent = audio(
  //   WriteActionsToContext[indexActionResult].soundMale
  // )

  // useEffect(() => {
  //   setTimeout(() => audioActionCurrent.play(), 0)
  //   setTimeout(() => audioActionCurrent.play(), 2000)
  // }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps

  // useEffect(() => {
  //   function selecting() {
  //     setTimer(timer + 1)
  //   }

  // setTimeout(selecting, 4000)
  // }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps

  return (
    <ContainerContexts>
      <Keyboard
        history={history}
        detection={globalContext.action}
        resetDetection={modifierActionNone}
      />
    </ContainerContexts>
  )
}



index.js: 

import React, { useState, useEffect, useContext, useCallback } from 'react'
import './styles.css'

import { audio } from '@/utils/sound'
import { NavigationTo } from '@/utils/navigationWithClickSound'

import ConfigButton from '@/assets/Botões/Botao-configuracao.png'
// import CustomButton from '@/assets/Botões/Botao-customizacao.png'
import AutonomusIcon from '@/assets/Icones/autonomus.png'
import RevelaLogo from '@/assets/logo-lais.png'

import SelectAnOptionM from '@/assets/Voz-masculina/Selecione uma opcao.mp3'
import SelectAnOptionF from '@/assets/Voz-feminina/Selecione uma opcao.mp3'

import ButtonAnimated from '@/components/ButtonAnimated'

import { GlobalContext } from '@/contexts/global.context'
import ConfigContext from '@/contexts/config.context'

// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'
// Datas
import { HomeActionsToContext } from '@/services/data'
import CameraStatus from './components/CameraStatus'
import Camera from './components/Camera'

export default function Home({ history }) {
  const { speedTimer, voice, autonomusCasa } = useContext(ConfigContext)
  const globalContext = useContext(GlobalContext)
  // const soundOn = globalContext.soundOn

  const modifierActionNone = () => {
    globalContext.modifier(oldState => ({
      ...oldState,
      action: 'none',
    }))
  }

  // Voz inicial: Selecione uma opção
  useEffect(() => {
    setTimeout(
      () => audio(voice === 'male' ? SelectAnOptionM : SelectAnOptionF).play(),
      2000
    )
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  const [timer, setTimer] = useState(-1) // começa em -1 para dar tempo de pedir para selecionar uma opção

  let audioTimer1
  let audioTimer2

  const actionToContextCount = HomeActionsToContext.length
  const indexActionResult = timer % actionToContextCount
  const audioActionCurrent =
    timer >= 0 &&
    audio(
      voice === 'male'
        ? HomeActionsToContext[indexActionResult].soundMale
        : HomeActionsToContext[indexActionResult].soundFemale
    )

  /* useEffect(() => {
    if (timer >= 0 && soundOn) {
      audioTimer1 = setTimeout(() => audioActionCurrent.play(), 0)
      audioTimer2 = setTimeout(() => audioActionCurrent.play(), 2000)
    }
  }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps
 */
  // Remove os audios(audioTimer1 e audioTimer2) da lista de timeout
  const clearAudioTimers = useCallback(() => {
    clearTimeout(audioTimer1)
    clearTimeout(audioTimer2)
  }, [audioTimer1, audioTimer2])

  useEffect(() => {
    function selecting() {
      setTimer(timer + 1)
    }

    setTimeout(selecting, checkSpeedTimer(speedTimer))
  }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps

  function renderButton(action) {
    if (action.label === 'Autonomus Casa' && autonomusCasa === false) {
      return null
    }

    return (
      <ButtonAnimated
        key={action.id}
        handleClick={() =>
          NavigationTo(
            history,
            action.path,
            audioActionCurrent,
            clearAudioTimers,
            modifierActionNone
          )
        }
        label={action.label}
        iconAnimated={action.icon}
        pulseAnimated={action.pulse}
        borderColor={action.borderColor}
        progressColor={action.progressColor}
        selecting={indexActionResult + 1 === action.order}
        loading
        isStyled
        action={globalContext.action}
      />
    )
  }

  return (
    <div className='home'>
      <div className='home-header'>
        <img
          className='configuration'
          onClick={() => history.push('/Configuracao')}
          src={ConfigButton}
          alt='Configuração'
        />
        <img className='autonomus-logo' src={AutonomusIcon} alt='Autonomus' />
        {/* <img className='customization' src={CustomButton} alt='Customização' /> */}
      </div>
      <div className={`home-main ${autonomusCasa && 'autonomusCasa'}`}>
        {HomeActionsToContext.map(action => renderButton(action))}
      </div>
      <div className='home-footer'>
        <div className='logo'>
          <img src={RevelaLogo} alt='Logo Revela' />
        </div>

        {/* <CameraStatus /> */}
        {/*  <Camera /> */}

        {/* <div className='img-envolve img-on'>
          <img
            onClick={() =>
              globalContext.modifier(oldState => ({
                ...oldState,
                soundOn: !soundOn,
              }))
            }
            src={soundOn ? SoundOnSelected : SoundOn}
            alt=''
          />
        </div>
        <div className='img-envolve img-off'>
          <img
            onClick={() =>
              globalContext.modifier(oldState => ({
                ...oldState,
                soundOn: !soundOn,
              }))
            }
            src={soundOn ? SoundOff : SoundOffSelected}
            alt=''
          />
        </div> */}
      </div>
    </div>
  )
}



index.js: 

import React from 'react'

import "./camera.css"
export default function Camera({ history }) {
    navigator.getUserMedia({video: true, audio: false}, (localMediaStream) => {
        var video = document.querySelector('video')
        video.srcObject = localMediaStream
        video.autoplay = true
     }, (error) => {
         console.log("error", error)
     })
  
  return (
    <div>
      <video  id="video" height="480" width="800" autoplay></video>
    </div>
  )
}



index.js: 

import React from 'react'
import useEyeTrackingSocket from '@/hooks/useEyeTrackingSocket'

import './styles.css'
import CAMERA_STATUS from '@/types/CameraStatus'

import cameraDisabledPng from '@/assets/webcam-disabled.png'
import cameraEnabledSvg from '@/assets/webcam-enabled.svg'

export default function CameraStatus() {
  const eyeTrackingData = useEyeTrackingSocket()

  const cameraEnabled = eyeTrackingData.cameraStatus === CAMERA_STATUS.ENABLED
  const textContent = cameraEnabled ? 'Webcam Ativa' : 'Webcam Desativada'
  const cameraImage = cameraEnabled ? cameraEnabledSvg : cameraDisabledPng

  const contatinerStyle = cameraEnabled ? 'camera-enabled' : 'camera-disabled'
  const textStyle = cameraEnabled
    ? 'status-text-enabled'
    : 'status-text-disabled'

  return (
    <div className={`camera-status ${contatinerStyle}`}>
      <img className='camera-image' src={cameraImage} alt={textContent} />
      <p className={`status-text ${textStyle}`}>{textContent}</p>
    </div>
  )
}



index.js: 

import React, { useState, useContext } from 'react'

import CheckCard from '@/components/CheckCard'

// import EyeIcon from '@/assets/eye/eye.jpeg'
// import CustomButton from '@/assets/Botões/Botao-customizacao.png'
import BackIcon from '@/assets/Página configuração/botao-voltar.png'
import SaveIcon from '@/assets/Página configuração/salvar.png'
import AutonomusCasaIcon from '@/assets/Página configuração/Casa/casa.png'
// import SaveIconSelected from '@/assets/Página configuração/salvar-selecionado.png'

// Icones da velocidade da piscada
// import SlowEyeIcon from '@/assets/animation/configuration/Olho_Devagar.json'
// import MediumEyeIcon from '@/assets/animation/configuration/Olho_Medio.json'
// import FastEyeIcon from '@/assets/animation/configuration/Olho_Rapido.json'

// on and off Sounds icons
import SoundOn from '@/assets/Página configuração/Audio/som-ligado.png'
import SoundOnSelected from '@/assets/Página configuração/Audio/som-ligado-selecionado.png'
import SoundOffSelected from '@/assets/Página configuração/Audio/som-desligado-selecionado.png'
import SoundOff from '@/assets/Página configuração/Audio/som-desligado.png'

// Male and Female Voices icons
import VoiceMale from '@/assets/Página configuração/Audio/voz-masculina.png'
import VoiceMaleSelected from '@/assets/Página configuração/Audio/voz-masculina-selecionada.png'
import VoiceFem from '@/assets/Página configuração/Audio/voz-feminina.png'
import VoiceFemSelected from '@/assets/Página configuração/Audio/voz-feminina-selecionada.png'
// import NotVoice from '@/assets/Página configuração/Audio/sem-voz.png'
// import NotVoiceSelected from '@/assets/Página configuração/Audio/sem-voz-selecionado.png'

// Acessibility
// Fonts
/* import NormalFont from '@/assets/Página configuração/Acessibilidade/fonte.png'
import NormalFontSelected from '@/assets/Página configuração/Acessibilidade/fonte-selecionada.png'
import PlusFont from '@/assets/Página configuração/Acessibilidade/fonte-ampliada.png'
import PlusFontSelected from '@/assets/Página configuração/Acessibilidade/fonte-ampliada-selecionada.png'
import ReduceFont from '@/assets/Página configuração/Acessibilidade/fonte-reduzida.png'
import ReduceFontSelected from '@/assets/Página configuração/Acessibilidade/fonte-reduzida-selecionada.png'
// Dyslexic
import Dislexic from '@/assets/Página configuração/Acessibilidade/open-dyslexic.png'
// Datonism
import Deuteranopia from '@/assets/Página configuração/Acessibilidade/deuteranopia.png'
import DeuteranopiaSelected from '@/assets/Página configuração/Acessibilidade/deuteranopia-selecionado.png'
import Protanopia from '@/assets/Página configuração/Acessibilidade/protanopia.png'
import ProtanopiaSelected from '@/assets/Página configuração/Acessibilidade/protanopia-selecionado.png'
import Tritanopia from '@/assets/Página configuração/Acessibilidade/tritanopia.png'
import TritanopiaSelected from '@/assets/Página configuração/Acessibilidade/tritanopia-selecionado.png' */

import ConfigContext from '@/contexts/config.context'

import {
  Container,
  Header,
  AudioContainer,
  // Accessibility,
  // Dislexia,
  // Daltonismo,
  Footer,
  House,
} from './styles'
import { ToggleButton } from '@/components/Button/styles'

export default function Configuration({ history }) {
  const {
    // speedBlink,
    // changeSpeedBlink,
    speedTimer,
    changeSpeedTimer,
    // theme,
    // changeTheme,
    sound,
    changeSound,
    voice,
    changeVoice,
    // fontSize,
    // changeFontSize,
    autonomusCasa,
    changeAutonomusCasa,
    layoutTeclado,
    changeLayoutTeclado,
    changeDefaultConfig,
    tomadaOnOff,
  } = useContext(ConfigContext)

  const data = useContext(ConfigContext)

  console.log(data)

  // const [daltonism, setDaltonism] = useState('deuteranopia')

  const [defaultConfig, setDefaultConfig] = useState(false)

  const updatehistory = path => {
    history.push(path)
  }

  function handleSaveChanges() {
    if (defaultConfig) {
      changeDefaultConfig()
    }
    history.push('/home')
  }
  return (
    <Container>
      <Header>
        <img
          className='back'
          src={BackIcon}
          onClick={() => updatehistory('/home')}
          alt='voltar'
        ></img>
        {/* <img className='custom' src={CustomButton} alt=''></img> */}
      </Header>
      {/* <CheckCard
        currentValue={speedBlink}
        changeValue={changeSpeedBlink}
        title='Velocidade da piscada'
        labels={['Devagar', 'Normal', 'Rápido']}
        imgs={[SlowEyeIcon, MediumEyeIcon, FastEyeIcon]}
        iconDimensions={[62, 33]}
      /> */}
      <CheckCard
        currentValue={speedTimer}
        changeValue={changeSpeedTimer}
        title='Temporizador'
        labels={['Devagar', 'Normal', 'Rápido']}
        iconDimensions={[45, 90, 143]}
      />
      {/* <CheckCard
        currentValue={theme}
        changeValue={changeTheme}
        title='Cores/temas'
        labels={['Claro', 'Escuro', 'Tons de cinza']}
        iconDimensions={{}}
      /> */}

      <CheckCard
        currentValue={layoutTeclado}
        changeValue={changeLayoutTeclado}
        title='Layout do teclado'
        labels={['frequencia', 'alfabético', 'Teclado  universal']}
        iconDimensions={[45, 90]}
      />

      <AudioContainer>
        <h1>Áudio</h1>
        <div className='audio-container'>
          <div className='sounds'>
            <p>Sons</p>
            <div>
              <img
                onClick={() => changeSound()}
                src={sound ? SoundOnSelected : SoundOn}
                alt=''
              />
              <img
                onClick={() => changeSound()}
                src={sound ? SoundOff : SoundOffSelected}
                alt=''
              />
            </div>
          </div>
          <div className='voices'>
            <p>Vozes</p>
            <div>
              <img
                onClick={() => changeVoice('female')}
                src={voice === 'female' ? VoiceFemSelected : VoiceFem}
                alt=''
              />
              <img
                onClick={() => changeVoice('male')}
                src={voice === 'male' ? VoiceMaleSelected : VoiceMale}
                alt=''
              />
            </div>
          </div>
        </div>
      </AudioContainer>

      {/* <Accessibility>
        <h1>Acessibilidade</h1>
        <div className='container'>
          <div className='font-size'>
            <h2>Tamanho da fonte</h2>
            <div className='font-size-imgs'>
              <img
                onClick={() => changeFontSize('normal')}
                src={fontSize === 'normal' ? NormalFontSelected : NormalFont}
                alt=''
              />

              <img
                onClick={() => changeFontSize('plus')}
                src={fontSize === 'plus' ? PlusFontSelected : PlusFont}
                alt=''
              />

              <img
                onClick={() => changeFontSize('reduce')}
                src={fontSize === 'reduce' ? ReduceFontSelected : ReduceFont}
                alt=''
              />
            </div>
          </div>
          {/*
          <Dislexia>
            <div className='check'>
              <h2>Dislexia</h2>
              <fomr>
                <label className='check-line'>
                  Open-Dyslexic
                  <input type='radio' name='radio'></input>
                  <span className='checkmark'></span>
                </label>
                <label className='check-line'>
                  Fonte padrão
                  <input type='radio' name='radio'></input>
                  <span className='checkmark'></span>
                </label>
              </fomr>
            </div>
            <img src={Dislexic} alt='' />
          </Dislexia>
          <Daltonismo>
            <h2>Daltonismo</h2>
            <div className='imgs'>
              <img
                onClick={() => setDaltonism('deuteranopia')}
                src={
                  daltonism === 'deuteranopia'
                    ? DeuteranopiaSelected
                    : Deuteranopia
                }
                alt=''
              />

              <img
                onClick={() => setDaltonism('protanopia')}
                src={
                  daltonism === 'protanopia' ? ProtanopiaSelected : Protanopia
                }
                alt=''
              />

              <img
                onClick={() => setDaltonism('tritanopia')}
                src={
                  daltonism === 'tritanopia' ? TritanopiaSelected : Tritanopia
                }
                alt=''
              />
            </div>
          </Daltonismo>
        </div>
      </Accessibility> */}

      <House>
        <h1>Autonomus Casa</h1>
        <div className='house-container'>
          <img src={AutonomusCasaIcon} alt='Autonomus Casa' />
          <div className='house-content'>
            <p>
              O Autonomus Casa ajuda você a controlar seus dispositivos, como
              luzes, televisão, ar condicionado, câmeras e outros dispositivos
              compatíveis.
            </p>
            <div className='house-actions'>
              {/*
                <img
                onClick={() => changeAutonomusCasa()}
                // src = {autonomusCasa ? casaDisabled : casaEnabled}
                src={autonomusCasa ? SaveIcon : SaveIcon}
                alt='Salvar'
              />
              */}

         <br />
         <div  style={{position: 'relative', width: '250px'}}>
         <ToggleButton slider={autonomusCasa ? 30 : 0}>
            <p className={autonomusCasa ? 'active' : 'disable'}>Desativado</p>
            <div >
              <input
                id='switch-shadow'
                className='switch switch--shadow'
                type='checkbox'
              />
              <label style={{backgroundColor: autonomusCasa && '#005b8d',margin: '0 10px'}} onClick={ () => changeAutonomusCasa()} for='switch-shadow'></label>
            </div>
            <p className={!autonomusCasa ? 'active' : 'disable'}>Ativado</p>
          </ToggleButton>
         </div>


            </div>
          </div>
        </div>
      </House>

      <Footer>
        <label>
          <span
            onClick={() => setDefaultConfig(!defaultConfig)}
            className={defaultConfig ? 'checkmark-active' : 'checkmark'}
          ></span>
          Voltar para padrão inicial
          <input type='checkbox'></input>
        </label>
        <img src={SaveIcon} alt='' onClick={() => handleSaveChanges()} />
      </Footer>
    </Container>
  )
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
`

export const Header = styled.div`
  width: 84%;
  height: 57px;
  margin: 0;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin: 5vh 104px 45px 104px;
  .custom {
    width: 221px;
    height: 57px;
  }

  img.back {
    cursor: pointer;
  }
`
export const AudioContainer = styled.div`
  width: 78%;

  h1 {
    letter-spacing: 0;
    color: #005b8d;
    opacity: 1;
    font-style: Bold;
    font-size: 27px;
  }

  .audio-container {
    margin: 3% 0 0 0;
    width: 100%;
    height: 165px;
    background: #e6eef2;
    border-radius: 5px;
    opacity: 1;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-content: flex-start;

    @media (max-width: 1000px) {
      display: flex;
      flex-direction: column;
      height: 330px;
      p {
        text-align: center;
        margin-bottom: 2vh;
        margin-right: 10vw;
      }
    }

    .sounds {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-content: flex-start;
      margin-left: 2vw;

      div {
        display: flex;
        flex-direction: row;
        justify-content: center;

        img {
          width: 117px;
          height: 96px;
          margin: 15px;
        }
      }
    }

    .voices {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-content: flex-start;
      margin-left: 2vw;

      div {
        display: flex;
        flex-direction: row;
        justify-content: center;
        img {
          width: 117px;
          height: 96px;
          margin: 15px;
        }
      }
    }

    p {
      font-style: Bold;
      font-size: 22px;
      letter-spacing: 0;
      color: #707070;
      opacity: 1;
      position: relative;
      left: 5%;
      top: 10%;
    }
  }
`
export const Accessibility = styled.div`
  width: 78%;
  margin: 24px 0 40px 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  h1 {
    font-style: Bold;
    font-size: 27px;
    letter-spacing: 0;
    color: #005b8d;
    opacity: 1;
  }
  .container {
    background: #e6eef2;
    min-width: 0;
    width: 100%;
    height: 100%;
    margin-top: 1vh;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

    .font-size {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      margin: 2vh 0 2vh 2vw;

      .font-size-imgs {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 27%;
        margin: 1% 0 0 0;

        @media (max-width: 1000px) {
          width: 40%;
        }

        img {
          width: 60px;
          height: 60px;
        }
      }

      h2 {
        text-align: left;
        font-style: Bold;
        font-size: 22px;
        letter-spacing: 0;
        color: #707070;
        opacity: 1;
      }
    }
  }
`
export const Dislexia = styled.div`
  display: flex;
  flex-direction: row;

  img {
    width: 267px;
    height: 54px;
    position: relative;
    top: 35%;
    left: 4%;
  }
  .check {
    margin: 3% 0 0 1px;
    h2 {
      font-style: Bold;
      font-size: 22px;
      letter-spacing: 0;
      color: #707070;
      opacity: 1;
      position: relative;
      left: 2%;
      margin-left: 2vw;
    }

    .check-line {
      display: block;
      position: relative;
      padding-left: 35px;
      margin: 4vh;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      text-align: left;
      font-weight: Regular;
      font-size: 27px;
      letter-spacing: 0;
      color: #707070;
      opacity: 1;

      input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
      }

      .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 30px;
        width: 30px;
        border: 2px solid #707070;
        opacity: 1;
        border-radius: 50%;
      }

      &:hover input ~ .checkmark {
        background-color: #ccc;
      }

      .checkmark:after {
        content: '';
        position: absolute;
        display: none;
      }

      input:checked ~ .checkmark:after {
        display: block;
      }

      .checkmark:after {
        top: 3px;
        left: 3px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: #005b8d;
      }
    }
  }
`

export const Daltonismo = styled.div`
  display: flex;
  flex-direction: column;
  margin-bottom: 2vh;
  h2 {
    font-style: Bold;
    font-size: 22px;
    letter-spacing: 0;
    color: #707070;
    opacity: 1;
    margin: 0 0 2% 2vw;
  }
  .imgs {
    width: 56%;
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    justify-content: space-between;
    margin-left: 2vw;
  }
`

export const Footer = styled.div`
  width: 78%;
  height: 165px;
  display: flex;
  margin: 5vh 0;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;

  img {
    width: 152px;
    height: 57px;
    cursor: pointer;
    margin-bottom: 2vh;
  }

  label {
    height: 100%;
    display: flex;
    height: 57px;
    align-items: center;
    letter-spacing: 0;
    color: #005b8d;
    opacity: 1;
    position: relative;
    padding: 0;
    cursor: pointer;
    font-size: 22px;
  }

  /* Hide the browser's default checkbox */
  label input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  label .checkmark {
    height: 25px;
    width: 25px;
    border: 2px solid #707070;
    opacity: 1;
    margin-right: 1vw;
  }

  .checkmark-active {
    height: 25px;
    width: 25px;
    border: 2px solid #707070;
    background-color: #005b8d;
    margin-right: 1vw;
    opacity: 1;
  }

  /* Style the checkmark/indicator */
  label .checkmark-active:after {
    content: '';
    position: absolute;
    display: none;
    display: block;
    left: 9px;
    top: 20px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
  }
`

export const House = styled.div`
  width: 78%;
  margin-top: 1%;

  h1 {
    letter-spacing: 0;
    color: #005b8d;
    opacity: 1;
    font-style: Bold;
    font-size: 27px;
    display: flex;
  }
  .house-container {
    margin-top: 3%;
    width: 100%;
    height: 185px;
    display: flex;
    padding: 0 4vh;
    align-items: center;
    background: #e6eef2;

    @media (max-width: 1000px) {
      display: flex;
      flex-direction: column;
      height: 300px;
      justify-content: center;
      align-items: center;
    }

    img {
      width: 118px;
      height: 107px;
    }

    .house-content {
      display: flex;
      flex-direction: column;
      margin-left: 7vh;

      @media (max-width: 1000px) {
        display: flex;
        flex-direction: column;
        margin: 0;
        align-items: center;
        margin-top: 1vh;
      }

      p {
        width: 90%;
        text-align: left;
        font: normal normal normal 20px/26px Lato;
        letter-spacing: 0px;
        color: #707070;
        opacity: 1;
      }
      .house-actions {
        margin-top: 2vh;

        img {
          width: 173px;
          height: 60px;
        }
        .bnt-house {
          color: #005b8d;
          height: 60px;
          width: 173px;
          font: normal normal normal 23px/26px Lato;
          border-radius: 34px;
          border: none;
          border: solid 1px #005b8d;
          background-color: #e6eef2;

          &:hover {
            cursor: pointer;
          }
          &.active {
            color: #ffffff;
            background-color: #005b8d;
          }
          strong {
            position: relative;
            font-size: 28px;
            span {
              position: absolute;
              left: -9px;
            }
          }
        }
      }
    }
  }
`



index.js: 

import React, { useState, useEffect, useContext } from 'react'

import { ContainerContexts, ContainerActions } from '@/styles/components'

import { audio } from '@/utils/sound'
import { NavigationTo } from '@/utils/navigationWithClickSound'

import Button from '@/components/Button'
import NavBar from '@/components/Navbar'

import { contexts } from '@/services/contexts'

import { GlobalContext } from '@/contexts/global.context'
import ConfigContext from '@/contexts/config.context'

// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'
// import { render } from 'react-dom'

import ChannelTv from '@/components/ChannelTv'
import SoundTv from '@/components/SoundTv'

export default function Context({ history, match }) {
  // TODO validar params
  // if (!contexts[match.params.contextId]) {
  //   history.push('page-not-found')
  // }

  const { speedTimer, tvModal, volModal } = useContext(ConfigContext)
  const globalContext = useContext(GlobalContext)
  // const soundOn = globalContext.soundOn

  const modifierActionNone = () => {
    globalContext.modifier(oldState => ({
      ...oldState,
      action: 'none',
    }))
  }

  const { menuItens, actionsToContext } = contexts[match.params.contextId]

  const [timer, setTimer] = useState(0)

  // Quantidade de ações na tela
  const actionToContextCount = actionsToContext.length
  const indexActionResult = timer % actionToContextCount
  const audioActionCurrent = audio(
    actionsToContext[indexActionResult].soundMale
  )
  const currentContext = match.params.contextId

  useEffect(() => {
    function selecting() {
      setTimer(timer + 1)
    }

    setTimeout(selecting, checkSpeedTimer(speedTimer))
  }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps

  function renderDisplayGrid() {
    let gridStyle
    if (actionsToContext.length <= 4) {
      gridStyle = { 'grid-template-columns': 'repeat(4, 1fr)' }
    } else if (currentContext === 'televisao') {
      gridStyle = { 'grid-template-columns': 'repeat(4, 1fr)' }
    } else if (currentContext === 'ar-condicionado') {
      gridStyle = { display: 'flex', 'flex-direction': 'column' }
    }
    return gridStyle
  }

  function renderButton(action) {
    return (
      <Button
        key={action.id}
        handleClick={() =>
          NavigationTo(
            history,
            action.path,
            audioActionCurrent,
            null,
            modifierActionNone
          )
        }
        label={action.label}
        icon={action.iconPath}
        activeIcon={action.activeIconPath}
        widthSize={action.iconWidth}
        heightSize={action.iconHeight}
        b1={action.backgroundColorOne}
        b2={action.backgroundColorTwo}
        b3={action.backgroundColorThree}
        borderColor={action.borderColor}
        buttontype={action.buttontype}
        content={action.content}
        cmd={action.cmd}
        currentContext={currentContext}
        selecting={
          (timer % actionToContextCount) + 1 === action.order ? true : false
        }
        action={globalContext.action}
      />
    )
  }

  return (
    <ContainerContexts>
      {(tvModal || volModal) && <div className='dark-background'></div>}
      {tvModal && <ChannelTv />}
      {volModal && <SoundTv />}
      {/*  {currentContext!==''&& <NavBar itensMenu={menuItens}  />} */}
      <NavBar itensMenu={menuItens} />

      <ContainerActions style={renderDisplayGrid()}>
        {currentContext === 'ar-condicionado' ? (
          <>
            <div className='ac-row1'>
              {actionsToContext.slice(0, 4).map(action => renderButton(action))}
            </div>
            <div className='ac-row2'>
              {actionsToContext
                .slice(4, actionsToContext.length + 1)
                .map(action => renderButton(action))}
            </div>
          </>
        ) : (
          <>{actionsToContext.map(action => renderButton(action))}</>
        )}
      </ContainerActions>
    </ContainerContexts>
  )
}



index.js: 

import React, { useState, useEffect, useContext } from 'react'
import { audio } from '@/utils/sound'
import './styles.css'
import Typed from 'react-typed'
import ConfigContext from '@/contexts/config.context'

import Animation from '@/components/Animation'

import welcomeAudioMasc from '@/assets/Voz-masculina/Bem-vindo.mp3'
import welcomeAudioFem from '@/assets/Voz-feminina/Bem-vindo.mp3'
import autonomusAudioMasc from '@/assets/Voz-masculina/Autonomus.mp3'
import autonomusAudioFem from '@/assets/Voz-feminina/Autonomus.mp3'
import pianoAudio from '@/assets/Autonomus_piano.wav'
import AutonomusAnimated from '@/assets/animation/Autonomus.json'

const audioClips = [
  { label: 'Introduction', sound: pianoAudio },
  {
    label: 'Autonomus',
    soundMale: autonomusAudioMasc,
    soundFemale: autonomusAudioFem,
  },
  {
    label: 'Bem-vindo',
    soundMale: welcomeAudioMasc,
    soundFemale: welcomeAudioFem,
  },
]

export default function Initial({ history }) {
  const { voice } = useContext(ConfigContext)

  const [tempo, setTempo] = useState(true)
  // const [nome, setNome] = useState('Antônio') // eslint-disable-line no-unused-vars
  const [nextTyped, setNextTyped] = useState(true)

  useEffect(() => {
    function transition() {
      setTempo(false)
    }
    function next() {
      setNextTyped(false)
    }

    function goHome() {
      history.push('/home')
    }

    setTimeout(transition, 5000)
    setTimeout(next, 7000)
    setTimeout(goHome, 10000)
    setTimeout(() => audio(audioClips[0].sound).play(), 1700)
    setTimeout(
      () =>
        audio(
          voice === 'male' ? audioClips[1].soundMale : audioClips[1].soundFemale
        ).play(),
      1700
    )
    setTimeout(
      () =>
        audio(
          voice === 'male' ? audioClips[2].soundMale : audioClips[2].soundFemale
        ).play(),
      5000
    )
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  return (
    <div className='Water-Marker'>
      <div className='initial-info'>
        {tempo === true ? (
          <Animation
            data={AutonomusAnimated}
            style={{ justifySelf: 'center', alignSelf: 'center' }}
          />
        ) : (
          <div className='welcome'>
            <h1 className='animated bounceInLeft'>
              <Typed
                strings={[`Bem vindo!`]}
                typeSpeed={39}
                onComplete={() => {
                  if (document.body.querySelector('.typed-cursor')) {
                    document.body.querySelector('.typed-cursor').style.display =
                      'none'
                  }
                }}
              />
            </h1>

            {nextTyped === true ? (
              <> </>
            ) : (
              <p className='animated bounceInLeft'>
                <Typed
                  strings={['Estou aqui para ser sua voz, vamos começar?']}
                  typeSpeed={26}
                />
              </p>
            )}
          </div>
        )}
      </div>
    </div>
  )
}



index.js: 

import React, { useState, useEffect, useContext } from 'react'

import { ContainerAction, Footer } from '@/styles/components'

import { actions } from '@/services/actions'
import { audio } from '@/utils/sound'
import {
  NavigationTo,
  NavigationToWithSound,
} from '@/utils/navigationWithClickSound'

import Button from '@/components/Button'
import NavBar from '@/components/Navbar'

import { GlobalContext } from '@/contexts/global.context'
import ConfigContext from '@/contexts/config.context'

// utils
import checkSpeedTimer from '@/utils/checkSpeedTimer'

export default function Category({ history, match }) {
  const { menuItens, action, actionsToContext } = actions[match.params.actionId]

  const { speedTimer, voice } = useContext(ConfigContext)
  const globalContext = useContext(GlobalContext)

  const modifierActionNone = () => {
    globalContext.modifier(prevState => ({
      ...prevState,
      action: 'none',
    }))
  }

  const [timer, setTimer] = useState(1)

  // let audioTimer

  // Quantidade de ações na tela
  const indexActionResult = timer % 3

  useEffect(() => {
    function selecting() {
      setTimer(timer + 1)
    }

    setTimeout(selecting, checkSpeedTimer(speedTimer))
  }, [timer]) // eslint-disable-line react-hooks/exhaustive-deps

  return (
    <ContainerAction>
      <NavBar itensMenu={menuItens} />
      <Footer>
        <Button
          key={actionsToContext[0].id}
          handleClick={() =>
            NavigationTo(
              history,
              actionsToContext[0].path,
              audio(actionsToContext[0].soundMale),
              null,
              modifierActionNone
            )
          }
          label={actionsToContext[0].label}
          icon={actionsToContext[0].iconPath}
          widthSize={actionsToContext[0].iconWidth}
          heightSize={actionsToContext[0].iconHeight}
          b1={actionsToContext[0].backgroundColorOne}
          b2={actionsToContext[0].backgroundColorTwo}
          b3={actionsToContext[0].backgroundColorThree}
          borderColor={actionsToContext[0].borderColor}
          selecting={indexActionResult + 1 === 1}
          action={globalContext.action}
        />
        <Button
          handleClick={() =>
            NavigationToWithSound(
              history,
              null,
              audio(action.sound[voice]),
              null,
              modifierActionNone
            )
          }
          label={action.label}
          icon={action.icon}
          widthSize={action.iconWidth}
          heightSize={action.iconHeight}
          b1={action.backgroundColorOne}
          b2={action.backgroundColorTwo}
          b3={action.backgroundColorThree}
          borderColor={action.backgroundColorThree}
          selecting={indexActionResult + 1 === 2}
          action={globalContext.action}
        />
        <Button
          key={actionsToContext[1].id}
          handleClick={() =>
            NavigationToWithSound(
              history,
              actionsToContext[1].path,
              audio(
                voice === 'male'
                  ? actionsToContext[1].soundMale
                  : actionsToContext[1].soundFemale
              ),
              null,
              modifierActionNone
            )
          }
          label={actionsToContext[1].label}
          icon={actionsToContext[1].iconPath}
          widthSize={actionsToContext[1].iconWidth}
          heightSize={actionsToContext[1].iconHeight}
          b1={actionsToContext[1].backgroundColorOne}
          b2={actionsToContext[1].backgroundColorTwo}
          b3={actionsToContext[1].backgroundColorThree}
          borderColor={actionsToContext[1].borderColor}
          selecting={indexActionResult + 1 === 3}
          action={globalContext.action}
        />
      </Footer>
    </ContainerAction>
  )
}



index.js: 

import React from 'react'
import { Container, SetPhrasesContent } from './styles'
import CheckPhrases from '../../components/CheckPhrases'
import SepeakerIcon from '../../assets/Botões/speaker.png'

import BackIcon from '@/assets/Botões/botao-voltar.png'
import SaveIcon from '@/assets/historico_de_frases/hover-configuracao.png' //TO-DO: inserir icone original
import ConfigIcon from '@/assets/historico_de_frases/hover-edicao@2x.png' //TO-DO: inserir icone original
import CustomIcon from '@/assets/historico_de_frases/hover-edicao@2x.png' //TO-DO: inserir icone original
import HistoryIcon from '@/assets/historico_de_frases/hover-historico.png' //TO-DO: inserir icone original

export default function SetPhrases({ history }) {
  const updatehistory = path => {
    history.push(path)
  }
  return (
    <Container>
      <div className='header'>
        <img src={BackIcon} onClick={() => updatehistory('/home')} alt='Voltar'/>
        <p>Histórico de frases</p>
      </div>
      <SetPhrasesContent>
        <div className='new-phrases-content'>
          <p id='phrases-title'>Frases</p>
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='newPhrases'
            day='ontem'
          />
        </div>
        <img src={SepeakerIcon} alt='Speaker'/>
        <div className='current-phrases-content'>
          <p id='phrases-title'>Arraste a frase aqui</p>
          <CheckPhrases
            phrases='Falar com Regina.'
            label='oldPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='oldPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='oldPhrases'
            day='ontem'
          />
          <CheckPhrases
            phrases='Falar com Regina.'
            label='oldPhrases'
            day='ontem'
          />
        </div>
      </SetPhrasesContent>
      <div className='footer'>
        <div className='phrases-actions'>
          <img alt='' src={SaveIcon}></img>
          <img alt='' src={SaveIcon}></img>
        </div>
        <div className='phrases-options'>
          <img className='circle-items' alt='' src={ConfigIcon}></img>
          <img className='circle-items' alt='' src={CustomIcon}></img>
          <img id='history-item' alt='' src={HistoryIcon}></img>
        </div>
      </div>
    </Container>
  )
}



styles.js: 

import styled from 'styled-components'

export const Container = styled.div`
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  .header {
    display: flex;
    align-items: center;
    width: 80%;
    text-align: center;
    margin-top: 4vh;
    p {
      position: relative;
      left: 33%;
      color: #005b8d;
      opacity: 1;
      letter-spacing: 0px;
      font-weight: Bold;
      font-size: 24px;
    }
    img {
      width: 110px;
      height: 50px;
    }
  }
  .footer {
    width: 80%;
    height: 10vh;
    display: flex;
    align-items: center;
    margin-top: 4vh;
    dispaly: flex;
    align-items: center;
    border-top: 2px #707070 solid;
    justify-content: flex-end;
    position: relative;
    .phrases-actions {
      width: 300px;
      height: 45px;
      display: flex;
      justify-content: space-between;
      position: absolute;
      right: 39%;

      img {
        width: 140px;
        height: 100%;
        cursor: pointer;
      }
    }
    .phrases-options {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 300px;
      height: 45px;

      .circle-items {
        width: 45px;
        height: 100%;
        cursor: pointer;
      }
      #history-item {
        width: 177px;
        height: 100%;
        cursor: pointer;
      }
    }
  }
`

export const SetPhrasesContent = styled.div`
  width: 80%;
  height: 70%;
  margin-top: 4vh;
  color: #707070;
  display: flex;
  align-items: center;
  img {
    width: 50px;
    height: 50px;
  }
  .new-phrases-content {
    width: 50%;
    height: 100%;
    background: #e6eef2;
    #phrases-title {
      font-weight: Bold;
      font-size: 20px;
      margin-left: 2vw;
      padding-top: 1.5vh;
    }
  }
  .current-phrases-content {
    width: 50%;
    height: 100%;
    background: #e6eef2;
    #phrases-title {
      font-weight: Bold;
      font-size: 20px;
      margin-left: 2vw;
      padding-top: 1.5vh;
    }
  }
`



actions.js: 

import CategoryIcon from '@/assets/Breadcrumb/categorias.png'

import HelpIcon from '@/assets/Icones/ajuda/ajuda.png'
import HelpIconNavbar from '@/assets/Breadcrumb/icone-ajuda.png'
import PrecisoDeAjudaMasc from '@/assets/Voz-masculina/Preciso-de-ajuda.mp3'
import PrecisoDeAjudaFem from '@/assets/Voz-feminina/Preciso-de-ajuda.mpeg'

import VoltarMasc from '@/assets/Voz-masculina/Voltar.mp3'
import ObrigadoMasc from '@/assets/Voz-masculina/obrigado.mp3'

import VoltarFem from '@/assets/Voz-feminina/Voltar.mp3'
import ObrigadoFem from '@/assets/Voz-feminina/obrigado.mp3'

import BackIcon from '@/assets/Icones/voltar/voltar.png'
import ConfirmIcon from '@/assets/Icones/confirmar/confirmar.png'

import ChoiceIcon from '@/assets/Breadcrumb/escolha.png'
import SelectedChoiceIcon from '@/assets/Breadcrumb/escolha-branco.png'
import AudioIcon from '@/assets/Breadcrumb/audio.png'
import SelectedAudioIcon from '@/assets/Breadcrumb/audio-branco.png'

// Banheiro
//// Icons
import SanitarioIcon from '@/assets/Icones/banheiro/sanitario.png'
import EscovarOsDentesIcon from '@/assets/Icones/banheiro/escovar.png'
import BanhoIcon from '@/assets/Icones/banheiro/banho.png'
import EnjooIcon from '@/assets/Icones/banheiro/enjoo.png'

//// Sounds
/*Male*/
import SanitarioMasc from '@/assets/Voz-masculina/quero-usar-o-sanitario.mp3'
import EscovarOsDentesMasc from '@/assets/Voz-masculina/quero-escovar-os-dentes.mp3'
import BanhoMasc from '@/assets/Voz-masculina/quero-tomar-banho.mp3'
import EnjooMasc from '@/assets/Voz-masculina/estou-enjoado.mp3'

/*Female*/
import SanitarioFem from '@/assets/Voz-feminina/quero-usar-o-sanitario.mp3'
import EscovarOsDentesFem from '@/assets/Voz-feminina/quero-escovar-os-dentes.mp3'
import BanhoFem from '@/assets/Voz-feminina/quero-tomar-banho.mp3'
import EnjooFem from '@/assets/Voz-feminina/estou-enjoado.mp3'

// Conforto
//// Icons
import CalorIcon from '@/assets/Icones/conforto/calor.png'
import FrioIcon from '@/assets/Icones/conforto/frio.png'
import DeitarIcon from '@/assets/Icones/conforto/deitar.png'
import PosicaoIcon from '@/assets/Icones/conforto/posicao.png'

//// Sounds
/*Male*/
import CalorMasc from '@/assets/Voz-masculina/estou-com-calor.mp3'
import FrioMasc from '@/assets/Voz-masculina/estou-com-frio.mp3'
import DeitarMasc from '@/assets/Voz-masculina/quero-me-deitar.mp3'
import PosicaoMasc from '@/assets/Voz-masculina/quero-mudar-de-posicao.mp3'

/*Female*/
import CalorFem from '@/assets/Voz-feminina/estou-com-calor.mp3'
import FrioFem from '@/assets/Voz-feminina/estou-com-frio.mp3'
import DeitarFem from '@/assets/Voz-feminina/quero-me-deitar.mp3'
import PosicaoFem from '@/assets/Voz-feminina/quero-mudar-de-posicao.mp3'

//Alimentação
////Icons
import ComidaIcon from '@/assets/Icones/alimentacao/comer.png'
import BebidaIcon from '@/assets/Icones/alimentacao/beber.png'

//// Sounds
/*Male*/
import ComerMasc from '@/assets/Voz-masculina/quero-comer.mp3'
import AguaMasc from '@/assets/Voz-masculina/quero-tomar-agua.mp3'

/*Female*/
import ComerFem from '@/assets/Voz-feminina/quero-comer.mp3'
import AguaFem from '@/assets/Voz-feminina/quero-tomar-agua.mp3'

// Meu corpo
//// Icons
import CabecaIcon from '@/assets/Icones/corpo/cabeca.png'
import PernaIcon from '@/assets/Icones/corpo/perna.png'
import CostasIcon from '@/assets/Icones/corpo/costas.png'
import OmbroIcon from '@/assets/Icones/corpo/ombro.png'

//// Sounds
/*Male*/
import DorDeCabecaMasc from '@/assets/Voz-masculina/estou-com-dor-de-cabeca.mp3'
// import PernaMasc from '@/assets/Voz-masculina/Perna.mp3'
// import CostasMasc from '@/assets/Voz-masculina/Costas.mp3'
// import OmbroMasc from '@/assets/Voz-masculina/Ombro.mp3'
import DorNaPernaMasc from '@/assets/Voz-masculina/estou-com-dor-na-perna.mp3'
import DorNasCostasMasc from '@/assets/Voz-masculina/estou-com-dor-nas-costas.mp3'
import DorNoOmbroMasc from '@/assets/Voz-masculina/estou-com-dor-no-ombro.mp3'

/*Female*/
import DorDeCabecaFem from '@/assets/Voz-feminina/estou-com-dor-de-cabeca.mp3'
// import PernaFem from '@/assets/Voz-feminina/Perna.mp3'
// import CostasFem from '@/assets/Voz-feminina/Costas.mp3'
// import OmbroFem from '@/assets/Voz-feminina/Ombro.mp3'
import DorNaPernaFem from '@/assets/Voz-feminina/estou-com-dor-na-perna.mp3'
import DorNasCostasFem from '@/assets/Voz-feminina/estou-com-dor-nas-costas.mp3'
import DorNoOmbroFem from '@/assets/Voz-feminina/estou-com-dor-no-ombro.mp3'

// Frases rápidas
//// Icons
import WordsIcon from '@/assets/Icones/mensagem/mensagens.png'
import PhraseIcon from '@/assets/Breadcrumb/icone-frases.png'
//// Sounds
/* Male */
import EstouComDorMasc from '@/assets/Voz-masculina/estou-com-dor.mp3'
import PrecisoIrAoBanheiroMasc from '@/assets/Voz-masculina/Preciso-ir-ao-banheiro.mp3'
import LigarTVMasc from '@/assets/Voz-masculina/quero-ligar-a-tv.mp3'
import QueroPassearMasc from '@/assets/Voz-masculina/quero-passear.mp3'

/* Female */
import EstouComDorFem from '@/assets/Voz-feminina/estou-com-dor.mp3'
import PrecisoIrAoBanheiroFem from '@/assets/Voz-feminina/Preciso-ir-ao-banheiro.mp3'
import LigarTVFem from '@/assets/Voz-feminina/quero-ligar-a-tv.mp3'
import QueroPassearFem from '@/assets/Voz-feminina/quero-passear.mp3'

export const actions = {
  /* Banheiro */
  sanitario: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma categoria',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Banheiro',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: SanitarioMasc,
        female: SanitarioFem,
      },
      label: 'Quero usar o sanitário',
      icon: SanitarioIcon,
      iconWidth: 77.32,
      iconHeight: 76.46,
      backgroundColorOne: '#FDF6E2',
      backgroundColorTwo: '#F1DDA4',
      backgroundColorThree: '#E8C357',
    },
  },

  'escovar-os-dentes': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Banheiro',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: EscovarOsDentesMasc,
        female: EscovarOsDentesFem,
      },
      label: 'Quero escovar os dentes',
      icon: EscovarOsDentesIcon,
      iconWidth: 76.59,
      iconHeight: 73.09,
      backgroundColorOne: '#FDF6E2',
      backgroundColorTwo: '#F1DDA4',
      backgroundColorThree: '#E8C357',
    },
  },

  banho: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Banheiro',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: BanhoMasc,
        female: BanhoFem,
      },
      label: 'Quero tomar banho',
      icon: BanhoIcon,
      iconWidth: 54.49,
      iconHeight: 74.05,
      backgroundColorOne: '#FDF6E2',
      backgroundColorTwo: '#F1DDA4',
      backgroundColorThree: '#E8C357',
    },
  },

  enjoo: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Banheiro',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: EnjooMasc,
        female: EnjooFem,
      },
      label: 'Estou enjoado',
      icon: EnjooIcon,
      iconWidth: 72.4,
      iconHeight: 72.4,
      backgroundColorOne: '#FDF6E2',
      backgroundColorTwo: '#F1DDA4',
      backgroundColorThree: '#E8C357',
    },
  },

  /* Conforto */
  calor: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Conforto',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: CalorMasc,
        female: CalorFem,
      },
      label: 'Estou com calor',
      icon: CalorIcon,
      iconWidth: 81,
      iconHeight: 78,
      backgroundColorOne: '#E3DEF7',
      backgroundColorTwo: '#CCC2F3',
      backgroundColorThree: '#A18FEF',
    },
  },

  frio: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Conforto',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: FrioMasc,
        female: FrioFem,
      },
      label: 'Estou com frio',
      icon: FrioIcon,
      iconWidth: 80.3,
      iconHeight: 75.95,
      backgroundColorOne: '#E3DEF7',
      backgroundColorTwo: '#CCC2F3',
      backgroundColorThree: '#A18FEF',
    },
  },

  deitar: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Conforto',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: DeitarMasc,
        female: DeitarFem,
      },
      label: 'Quero me deitar',
      icon: DeitarIcon,
      iconWidth: 93.31,
      iconHeight: 52.79,
      backgroundColorOne: '#E3DEF7',
      backgroundColorTwo: '#CCC2F3',
      backgroundColorThree: '#A18FEF',
    },
  },

  posicao: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Conforto',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: PosicaoMasc,
        female: PosicaoFem,
      },
      label: 'Quero mudar de posição',
      icon: PosicaoIcon,
      iconWidth: 84.9,
      iconHeight: 61.65,
      backgroundColorOne: '#E3DEF7',
      backgroundColorTwo: '#CCC2F3',
      backgroundColorThree: '#A18FEF',
    },
  },

  /* Alimentação */
  comer: {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Alimentação',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: ComerMasc,
        female: ComerFem,
      },
      label: 'Quero comer',
      icon: ComidaIcon,
      iconWidth: 66.28,
      iconHeight: 66.28,
      backgroundColorOne: '#EBB9CA',
      backgroundColorTwo: '#D186A2',
      backgroundColorThree: '#BA7089',
    },
  },

  'tomar-agua': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Minha alimentação',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: AguaMasc,
        female: AguaFem,
      },
      label: 'Quero tomar água',
      icon: BebidaIcon,
      iconWidth: 46.71,
      iconHeight: 59.75,
      backgroundColorOne: '#EBB9CA',
      backgroundColorTwo: '#D186A2',
      backgroundColorThree: '#BA7089',
    },
  },

  /* Meu corpo */
  'estou-com-dor-de-cabeca': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu corpo',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: DorDeCabecaMasc,
        female: DorDeCabecaFem,
      },
      label: 'Estou com dor de cabeça',
      icon: CabecaIcon,
      iconWidth: 54.24,
      iconHeight: 102.38,
      backgroundColorOne: '#FFD6D6',
      backgroundColorTwo: '#DAA2A2',
      backgroundColorThree: '#CE8787',
    },
  },

  'estou-com-dor-na-perna': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu corpo',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: DorNaPernaMasc,
        female: DorNaPernaFem,
      },
      label: 'Estou com dor na perna',
      icon: PernaIcon,
      iconWidth: 53.33,
      iconHeight: 80.98,
      backgroundColorOne: '#FFD6D6',
      backgroundColorTwo: '#DAA2A2',
      backgroundColorThree: '#CE8787',
    },
  },

  'estou-com-dor-nas-costas': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu corpo',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: DorNasCostasMasc,
        female: DorNasCostasFem,
      },
      label: 'Estou com dor nas costas',
      icon: CostasIcon,
      iconWidth: 57.11,
      iconHeight: 86.72,
      backgroundColorOne: '#FFD6D6',
      backgroundColorTwo: '#DAA2A2',
      backgroundColorThree: '#CE8787',
    },
  },

  'estou-com-dor-no-ombro': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu corpo',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#365999',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: DorNoOmbroMasc,
        female: DorNoOmbroFem,
      },
      label: 'Estou com dor no ombro',
      icon: OmbroIcon,
      iconWidth: 54.74,
      iconHeight: 83.12,
      backgroundColorOne: '#FFD6D6',
      backgroundColorTwo: '#DAA2A2',
      backgroundColorThree: '#CE8787',
    },
  },

  /* Frases rápidas */
  'preciso-ir-ao-banheiro': {
    menuItens: [
      {
        label: 'Frases rápidas',
        position: 'level1',
        img: [PhraseIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma frase',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        active: true,
        color: '#449391',
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: PrecisoIrAoBanheiroMasc,
        female: PrecisoIrAoBanheiroFem,
      },
      label: 'Preciso ir ao banheiro',
      icon: WordsIcon,
      iconWidth: 114.33,
      iconHeight: 71.85,
      backgroundColorOne: '#BEE9E7',
      backgroundColorTwo: '#9EDDDC',
      backgroundColorThree: '#7DD2D0',
    },
  },

  'ligar-a-TV': {
    menuItens: [
      {
        label: 'Frases rápidas',
        position: 'level1',
        img: [PhraseIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },

      {
        label: 'Escolha uma frase',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        active: true,
        color: '#449391',
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: LigarTVMasc,
        female: LigarTVFem,
      },
      label: 'Quero ligar a TV',
      icon: WordsIcon,
      iconWidth: 114.33,
      iconHeight: 71.85,
      backgroundColorOne: '#BEE9E7',
      backgroundColorTwo: '#9EDDDC',
      backgroundColorThree: '#7DD2D0',
    },
  },

  'estou-com-dor': {
    menuItens: [
      {
        label: 'Frases rápidas',
        position: 'level1',
        img: [PhraseIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma frase',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        active: true,
        color: '#449391',
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: EstouComDorMasc,
        female: EstouComDorFem,
      },
      label: 'Estou com dor',
      icon: WordsIcon,
      iconWidth: 114.33,
      iconHeight: 71.85,
      backgroundColorOne: '#BEE9E7',
      backgroundColorTwo: '#9EDDDC',
      backgroundColorThree: '#7DD2D0',
    },
  },

  'quero-passear': {
    menuItens: [
      {
        label: 'Frases rápidas',
        position: 'level1',
        img: [PhraseIcon], //Array de imagens que alternam se esta no nivel selecionado
        width: 58, //largura da imagem
        height: 37, //altura da imagem
      },
      {
        label: 'Escolha uma frase',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        active: true,
        color: '#449391',
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: QueroPassearMasc,
        female: QueroPassearFem,
      },
      label: 'Quero passear',
      icon: WordsIcon,
      iconWidth: 114.33,
      iconHeight: 71.85,
      backgroundColorOne: '#BEE9E7',
      backgroundColorTwo: '#9EDDDC',
      backgroundColorThree: '#7DD2D0',
    },
  },

  /* Preciso de ajuda */
  'preciso-de-ajuda': {
    menuItens: [
      {
        label: 'Preciso de ajuda',
        position: 'level1',
        img: [HelpIconNavbar],
        width: 40,
        height: 40,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
        color: '#B84647',
        active: true,
      },
    ],
    actionsToContext: [
      {
        id: 0,
        order: 1,
        path: 'voltar',
        label: 'Voltar',
        iconPath: BackIcon,
        iconWidth: 85.3,
        iconHeight: 53.66,
        soundMale: VoltarMasc,
        soundFemale: VoltarFem,
        backgroundColorOne: '#99BED1',
        backgroundColorTwo: '#669DBB',
        backgroundColorThree: '#337DA4',
        borderColor: '#337DA4',
      },
      {
        id: 1,
        order: 2,
        path: '/home',
        label: 'Obrigado',
        iconPath: ConfirmIcon,
        iconWidth: 84.06,
        iconHeight: 48.15,
        soundMale: ObrigadoMasc,
        soundFemale: ObrigadoFem,
        backgroundColorOne: '#B2D8CC',
        backgroundColorTwo: '#8CC4B3',
        backgroundColorThree: '#65B199',
        borderColor: '#2C7660',
      },
    ],
    action: {
      sound: {
        male: PrecisoDeAjudaMasc,
        female: PrecisoDeAjudaFem,
      },
      label: 'Preciso de ajuda',
      icon: HelpIcon,
      iconWidth: 94.41,
      iconHeight: 94.63,
      backgroundColorOne: '#fbbebf',
      backgroundColorTwo: '#f89e9e',
      backgroundColorThree: '#f67d7e',
    },
  },
}



keyboard-api.js: 

import axios from 'axios'

const apiPath = 'http://localhost:5000/'

const api = axios.create({
  baseURL: apiPath
})


export default {api, apiPath}



EyeTrackingSocketService.js: 

import  io  from 'socket.io-client'

class EyeTrackingSocket {
  socket = null

  listeners = []

  connect = () => {
    this.socket = io('http://localhost:3001/')

    this.socket.on('connect', () => {
      console.log('Socket Connected!')
      console.log(`Socket ID: ${this.socket.id}`)
    })
  }

  

  addOnDetectionListener = onMessageFunction => {
    this.listeners.push(onMessageFunction)

    this.socket.on('detection', data => {
      console.log('detection',data)

      
      const res = JSON.parse(data)
      const teste = {...res, cameraStatus: 'enabled'}
  
      onMessageFunction(teste)
    })
  }

  addCameraStatusListener = onMessageFunction => {
    this.listeners.push(onMessageFunction)

    this.socket.on('cameraStatus', data => {

      const res = JSON.parse(data)

      onMessageFunction(res)
    })
  }

  dispose = () => {
    this.listeners.map(l => {
      this.socket.off('detection', l)

      return l
    })

    this.listeners = []

    this.socket.disconnect()
  }
  
  
}

export default new EyeTrackingSocket()



contexts.js: 

import PhraseIcon from '@/assets/Breadcrumb/icone-frases.png'
import CategoryIcon from '@/assets/Breadcrumb/categorias.png'

import ChoiceIcon from '@/assets/Breadcrumb/escolha.png'
import SelectedChoiceIcon from '@/assets/Breadcrumb/escolha-branco.png'
import AudioIcon from '@/assets/Breadcrumb/audio.png'
import SelectedAudioIcon from '@/assets/Breadcrumb/audio-branco.png'
import OnOffIcon from '@/assets/Breadcrumb/icone-onoff.png'
import HouseIcon from '@/assets/Breadcrumb/icone-casa.png'
// import RemoteControlIcon from '@/assets/Breadcrumb/controle.png'
import SelectedRemoteControlIcon from '@/assets/Breadcrumb/controle-branco.png'
import {
  QuickPhrasesActionsToContext,
  CategoryActionsToContext,
  // Autonomus Casa
  AutonomusCasaActionsToContext,
  CasaSalaActionsToContext,
  CasaSalaArCondicionadoActionsToContext,
  TelevisaoActionsToContext,
  // Minhas opções
  ConfortActionsToContext,
  BathroomActionsToContext,
  FoodActionsToContext,
  BodyActionsToContext,
  OrteseProteseActionsToContext,
} from './data'

export const contexts = {
  'minhas-frases-favoritas': {
    menuItens: [
      {
        label: 'Frases rápidas',
        position: 'level1',
        img: [PhraseIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma frase',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        active: true,
        color: '#449391',
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: QuickPhrasesActionsToContext,
  },
  'autonomus-casa': {
    menuItens: [
      {
        label: 'Autonomus Casa',
        position: 'level1',
        img: [HouseIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 40.98, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha um ambiente',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        active: true,
        color: '#71488A',
      },
      {
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [OnOffIcon, SelectedAudioIcon],
        width: 30,
        height: 36.45,
      },
    ],
    actionsToContext: AutonomusCasaActionsToContext,
  },
  'minhas-opcoes': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#365999',
        active: true,
      },
      {
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: CategoryActionsToContext,
  },
  'meu-conforto': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu conforto',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#365999',
        active: true,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: ConfortActionsToContext,
  },
  'minhas-necessidades': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Minhas necessidades',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#365999',
        active: true,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: BathroomActionsToContext,
  },
  'minha-alimentacao': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Minha alimentação',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#365999',
        active: true,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: FoodActionsToContext,
  },
  'meu-corpo': {
    menuItens: [
      {
        label: 'Minhas opções',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha uma opção',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Meu corpo',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#365999',
        active: true,
      },
      {
        position: 'level3',
        img: [AudioIcon, SelectedAudioIcon],
        width: 64,
        height: 64,
      },
    ],
    actionsToContext: BodyActionsToContext,
  },
  sala: {
    menuItens: [
      {
        label: 'Autonomus Casa',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha um ambiente',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Aparelhos',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#71488A',
        active: true,
      },
      {
        position: 'level3',
        img: [OnOffIcon, SelectedRemoteControlIcon],
        width: 30,
        height: 36.45,
      },
    ],
    actionsToContext: CasaSalaActionsToContext,
  },
  televisao: {
    menuItens: [
      {
        label: 'Autonomus Casa',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha um ambiente',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Aparelhos',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#71488A',
      },
      {
        label: 'Controle TV',
        position: 'level3',
        img: [ChoiceIcon, SelectedRemoteControlIcon],
        width: 24.8,
        height: 37.6,
        color: '#71488A',
        active: true,
      },
    ],
    actionsToContext: TelevisaoActionsToContext,
  },
  'ar-condicionado': {
    menuItens: [
      {
        label: 'Autonomus Casa',
        position: 'level1',
        img: [CategoryIcon],
        width: 58,
        height: 37,
      },
      {
        label: 'Escolha um ambiente',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Aparelhos',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#71488A',
        active: false,
      },
      {
        label: 'Controle ar condicionado',
        position: 'level3',
        img: [ChoiceIcon, SelectedRemoteControlIcon],
        width: 24.8,
        height: 37.6,
        color: '#71488A',
        active: true,
      },
    ],
    actionsToContext: CasaSalaArCondicionadoActionsToContext,
  },
  'orteses-proteses': {
    menuItens: [
      {
        label: 'Autonomus Casa',
        position: 'level1',
        img: [CategoryIcon], // Array de imagens que alternam se esta no nivel selecionado
        width: 58, // largura da imagem
        height: 37, // altura da imagem
      },
      {
        label: 'Escolha um ambiente',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
      },
      {
        label: 'Aparelhos',
        position: 'level2',
        img: [ChoiceIcon, SelectedChoiceIcon],
        width: 35,
        height: 30,
        color: '#71488A',
        active: true,
      },
      {
        position: 'level3',
        img: [OnOffIcon, SelectedRemoteControlIcon],
        width: 30,
        height: 36.45,
      },
    ],
    actionsToContext: OrteseProteseActionsToContext,
  },
}



data.js: 

// Home imports
/// / Icons
import HelpIcon from '@/assets/Icones/ajuda/ajuda.png'
import WordsIcon from '@/assets/Icones/mensagem/mensagens.png'
import ConfirmIcon from '@/assets/Icones/confirmar/confirmar.png'

// Modais
import AumentarIcon from '@/assets/tv/aumentar.png'
import DiminuirIcon from '@/assets/tv/diminuir.png'
import ModalBackIcon from '@/assets/tv/voltar.png'

/// / Sounds
/* Male */
import PrecisoDeAjudaMasc from '@/assets/Voz-masculina/Preciso-de-ajuda.mp3'
import MinhasFrasesFavMasc from '@/assets/Voz-masculina/minhas-frases-favoritas.mp3'
import MinhasOpcoesMasc from '@/assets/Voz-masculina/minhas-opcoes.mp3'
import QueroEscreverMasc from '@/assets/Voz-masculina/quero-escrever.mp3'
import VoltarMasc from '@/assets/Voz-masculina/Voltar.mp3'
import ObrigadoMasc from '@/assets/Voz-masculina/obrigado.mp3'
import AutonomusCasaMasc from '@/assets/Voz-masculina/Autonomus-casa.mp3'

/* Female */
import PrecisoDeAjudaFem from '@/assets/Voz-feminina/Preciso-de-ajuda.mpeg'
import MinhasFrasesFavFem from '@/assets/Voz-feminina/minhas-frases-favoritas.mp3'
import MinhasOpcoesFem from '@/assets/Voz-feminina/minhas-opcoes.mp3'
import QueroEscreverFem from '@/assets/Voz-feminina/quero-escrever.mp3'
import VoltarFem from '@/assets/Voz-feminina/Voltar.mp3'
import ObrigadoFem from '@/assets/Voz-feminina/obrigado.mp3'
import AutonomusCasaFem from '@/assets/Voz-feminina/Autonomus-casa.mp3'

/// / Animations
import NeedHelpAnimated from '@/assets/animation/icone_precisodeajuda.json'
import RedPulse from '@/assets/animation/pulsar_vermelho.json'

import QuickWordsAnimated from '@/assets/animation/icone_frasesrapidas.json'
import GreenPulse from '@/assets/animation/pulsar_verde.json'

import CategoriesAnimated from '@/assets/animation/icone_categorias.json'
import BluePulse from '@/assets/animation/pulsar_azulclaro.json'

import WriteAnimated from '@/assets/animation/icone_escrever.json'
import OrangePulse from '@/assets/animation/pulsar_laranja.json'

import HouseAnimated from '@/assets/animation/icone_casa.json'
import PurplePulse from '@/assets/animation/pulsar_roxo.json'

// QuickPhrases imports
/// / Icons
import BackIcon from '@/assets/Icones/voltar/voltar.png'
/// / Sounds
/* Male */
import EstouComDorMasc from '@/assets/Voz-masculina/estou-com-dor.mp3'
import PrecisoIrAoBanheiroMasc from '@/assets/Voz-masculina/Preciso-ir-ao-banheiro.mp3'
import LigarTVMasc from '@/assets/Voz-masculina/quero-ligar-a-tv.mp3'
import QueroPassearMasc from '@/assets/Voz-masculina/quero-passear.mp3'

/* Female */
import EstouComDorFem from '@/assets/Voz-feminina/estou-com-dor.mp3'
import PrecisoIrAoBanheiroFem from '@/assets/Voz-feminina/Preciso-ir-ao-banheiro.mp3'
import LigarTVFem from '@/assets/Voz-feminina/quero-ligar-a-tv.mp3'
import QueroPassearFem from '@/assets/Voz-feminina/quero-passear.mp3'

// Category imports
/// / Icons
// import CategoryIcon from '@/assets/Breadcrumb/minhas-opcoes.png'
import ToaletIcon from '@/assets/Icones/banheiro/banheiro.png'
import BodyIcon from '@/assets/Icones/corpo/corpo.png'
import ConfortIcon from '@/assets/Icones/conforto/conforto.png'
import FoodIcon from '@/assets/Icones/alimentacao/alimentacao.png'

/// / Sounds
/* Male */
import NecessidadesMasc from '@/assets/Voz-masculina/minhas-necessidades.mp3'
import ConfortoMasc from '@/assets/Voz-masculina/meu-conforto.mp3'
import MeuCorpoMasc from '@/assets/Voz-masculina/meu-corpo.mp3'
import AlimentacaoMasc from '@/assets/Voz-masculina/minha-alimentacao.mp3'

/* Female */
import NecessidadesFem from '@/assets/Voz-feminina/minhas-necessidades.mp3'
import ConfortoFem from '@/assets/Voz-feminina/meu-conforto.mp3'
import MeuCorpoFem from '@/assets/Voz-feminina/meu-corpo.mp3'
import AlimentacaoFem from '@/assets/Voz-feminina/minha-alimentacao.mp3'

// BathroomActions imports
/// / Icons
import SanitarioIcon from '@/assets/Icones/banheiro/sanitario.png'
import EscovarOsDentesIcon from '@/assets/Icones/banheiro/escovar.png'
import BanhoIcon from '@/assets/Icones/banheiro/banho.png'
import EnjooIcon from '@/assets/Icones/banheiro/enjoo.png'

/// / Sounds
/* Male */
import SanitarioMasc from '@/assets/Voz-masculina/quero-usar-o-sanitario.mp3'
import EscovarOsDentesMasc from '@/assets/Voz-masculina/quero-escovar-os-dentes.mp3'
import BanhoMasc from '@/assets/Voz-masculina/quero-tomar-banho.mp3'
import EnjooMasc from '@/assets/Voz-masculina/estou-enjoado.mp3'

/* Female */
import SanitarioFem from '@/assets/Voz-feminina/quero-usar-o-sanitario.mp3'
import EscovarOsDentesFem from '@/assets/Voz-feminina/quero-escovar-os-dentes.mp3'
import BanhoFem from '@/assets/Voz-feminina/quero-tomar-banho.mp3'
import EnjooFem from '@/assets/Voz-feminina/estou-enjoado.mp3'

// ConfortActions imports
import CalorIcon from '@/assets/Icones/conforto/calor.png'
import FrioIcon from '@/assets/Icones/conforto/frio.png'
import DeitarIcon from '@/assets/Icones/conforto/deitar.png'
import PosicaoIcon from '@/assets/Icones/conforto/posicao.png'

/// / Sounds
/* Male */
import CalorMasc from '@/assets/Voz-masculina/estou-com-calor.mp3'
import FrioMasc from '@/assets/Voz-masculina/estou-com-frio.mp3'
import DeitarMasc from '@/assets/Voz-masculina/quero-me-deitar.mp3'
import PosicaoMasc from '@/assets/Voz-masculina/quero-mudar-de-posicao.mp3'

/* Female */
import CalorFem from '@/assets/Voz-feminina/estou-com-calor.mp3'
import FrioFem from '@/assets/Voz-feminina/estou-com-frio.mp3'
import DeitarFem from '@/assets/Voz-feminina/quero-me-deitar.mp3'
import PosicaoFem from '@/assets/Voz-feminina/quero-mudar-de-posicao.mp3'

// FoodActions imports
import ComidaIcon from '@/assets/Icones/alimentacao/comer.png'
import BebidaIcon from '@/assets/Icones/alimentacao/beber.png'

/// / Sounds
/* Male */
import ComerMasc from '@/assets/Voz-masculina/quero-comer.mp3'
import AguaMasc from '@/assets/Voz-masculina/quero-tomar-agua.mp3'

/* Female */
import ComerFem from '@/assets/Voz-feminina/quero-comer.mp3'
import AguaFem from '@/assets/Voz-feminina/quero-tomar-agua.mp3'

// BodyActions imports
import CabecaIcon from '@/assets/Icones/corpo/cabeca.png'
import PernaIcon from '@/assets/Icones/corpo/perna.png'
import CostasIcon from '@/assets/Icones/corpo/costas.png'
import OmbroIcon from '@/assets/Icones/corpo/ombro.png'

/// / Sounds
/* Male */
import DorDeCabecaMasc from '@/assets/Voz-masculina/estou-com-dor-de-cabeca.mp3'
import DorNaPernaMasc from '@/assets/Voz-masculina/estou-com-dor-na-perna.mp3'
import DorNasCostasMasc from '@/assets/Voz-masculina/estou-com-dor-nas-costas.mp3'
import DorNoOmbroMasc from '@/assets/Voz-masculina/estou-com-dor-no-ombro.mp3'

/* Female */
import DorDeCabeçaFem from '@/assets/Voz-feminina/estou-com-dor-de-cabeca.mp3'
import DorNaPernaFem from '@/assets/Voz-feminina/estou-com-dor-na-perna.mp3'
import DorNasCostasFem from '@/assets/Voz-feminina/estou-com-dor-nas-costas.mp3'
import DorNoOmbroFem from '@/assets/Voz-feminina/estou-com-dor-no-ombro.mp3'

// AutonomusCasa imports
import BanheiroIcon from '@/assets/Icones/casa/banheiro.png'
import CozinhaIcon from '@/assets/Icones/casa/cozinha.png'
import SalaIcon from '@/assets/Icones/casa/sala.png'
import QuartoIcon from '@/assets/Icones/casa/quarto.png'

/// / Sounds
/* Male */
import BanheiroMasc from '@/assets/Voz-masculina/Banheiro.mp3'
import CozinhaMasc from '@/assets/Voz-masculina/Cozinha.mp3'
import SalaMasc from '@/assets/Voz-masculina/Sala.mp3'
import QuartoMasc from '@/assets/Voz-masculina/Quarto.mp3'

/* Female */
import BanheiroFem from '@/assets/Voz-feminina/Banheiro.mp3'
import CozinhaFem from '@/assets/Voz-feminina/Cozinha.mp3'
import SalaFem from '@/assets/Voz-feminina/Sala.mp3'
import QuartoFem from '@/assets/Voz-feminina/Quarto.mp3'

// CasaSalaActions imports
import ArCondicionadoIcon from '@/assets/Icones/sala/ar-condicionado.png'
import LampadaIcon from '@/assets/Icones/sala/lampada.png'
import LampadaOnIcon from '@/assets/Icones/sala/Lampada_Acesa.png'
import TomadaOnIcon from '@/assets/Icones/sala/Tomada_Ligada.png'
import TomadaIcon from '@/assets/Icones/sala/tomada.png'
import TVIcon from '@/assets/Icones/sala/tv.png'

/// / Sounds
/* Male */
import ArCondicionadoMasc from '@/assets/Voz-masculina/Ar-condicionado.mp3'
import LampadaMasc from '@/assets/Voz-masculina/Lampada.mp3'
import TomadaMasc from '@/assets/Voz-masculina/Tomada.mp3'
import TVMasc from '@/assets/Voz-masculina/Televisao.mp3'

/* Female */
import ArCondicionadoFem from '@/assets/Voz-feminina/Ar-condicionado.mp3'
import LampadaFem from '@/assets/Voz-feminina/Lampada.mp3'
import TomadaFem from '@/assets/Voz-feminina/Tomada.mp3'
import TVFem from '@/assets/Voz-feminina/Televisao.mp3'

// TelevisionActions imports
import CanalIcon from '@/assets/tv/canal.png'
import LigarDesligarIcon from '@/assets/tv/ligar-desligar.png'
import MudoIcon from '@/assets/tv/mudo.png'
import VolumeIcon from '@/assets/tv/volume.png'

/// /Sounds
/* Male */
import CanalMasc from '@/assets/Voz-masculina/Canal.mp3'
import LigarDesligarMasc from '@/assets/Voz-masculina/Ligar-ou-desligar.mp3'
import MudoMasc from '@/assets/Voz-masculina/Mudo.mp3'
import VolumeMasc from '@/assets/Voz-masculina/Volume.mp3'

/* Female */
import CanalFem from '@/assets/Voz-feminina/Canal.mp3'
import LigarDesligarFem from '@/assets/Voz-feminina/Ligar-ou-desligar.mp3'
import MudoFem from '@/assets/Voz-feminina/Mudo.mp3'
import VolumeFem from '@/assets/Voz-feminina/Volume.mp3'

// ArCondicionadoActions imports
import VentoForteIcon from '@/assets/ar-cond/wind.png'
import VentoMedioIcon from '@/assets/ar-cond/wind2.png'
import VentoFracoIcon from '@/assets/ar-cond/wind3.png'
import FlocoIcon from '@/assets/ar-cond/snowflake.png'
import GotasIcon from '@/assets/ar-cond/gotas.png'
import VentiladorIcon from '@/assets/ar-cond/ventilador.png'
// import FluxoIcon from '@/assets/ar-cond/fluxo.png'

/// /Sounds
/* Male */
import Grupo1Masc from '@/assets/Voz-masculina/Grupo1.mp3'
import Grupo2Masc from '@/assets/Voz-masculina/Grupo2.mp3'
import Grupo3Masc from '@/assets/Voz-masculina/Grupo3.mp3'
// import Grupo4Masc from '@/assets/Voz-masculina/Grupo4.mp3'

/* Female */
import Grupo1Fem from '@/assets/Voz-feminina/Grupo1.mp3'
import Grupo2Fem from '@/assets/Voz-feminina/Grupo2.mp3'
import Grupo3Fem from '@/assets/Voz-feminina/Grupo3.mp3'
// import Grupo4Fem from '@/assets/Voz-feminina/Grupo4.mp3'

// icon protese-ortese
import maoFechada from '@/assets/Icones/ortese-protese/mao-closed.png'
import maoOpen from '@/assets/Icones/ortese-protese/mao-open.png'
import Embreve from '@/assets/Icones/ortese-protese/ferramentas.png'

// Declare exports
export const HomeActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    icon: NeedHelpAnimated,
    pulse: RedPulse,
    progressColor: '#f67d7e',
    borderColor: '#ae292a',
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/minhas-frases-favoritas',
    label: 'Frases rápidas',
    soundMale: MinhasFrasesFavMasc,
    soundFemale: MinhasFrasesFavFem,
    icon: QuickWordsAnimated,
    pulse: GreenPulse,
    progressColor: '#7DD2D0',
    borderColor: '#2D6462',
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/minhas-opcoes',
    label: 'Minhas opções',
    soundMale: MinhasOpcoesMasc,
    soundFemale: MinhasOpcoesFem,
    icon: CategoriesAnimated,
    pulse: BluePulse,
    progressColor: '#8AADEF',
    borderColor: '#355799',
  },
  {
    id: 3,
    order: 4,
    path: '/quero-escrever',
    label: 'Quero escrever',
    soundMale: QueroEscreverMasc,
    soundFemale: QueroEscreverFem,
    icon: WriteAnimated,
    pulse: OrangePulse,
    progressColor: '#FDAA78',
    borderColor: '#A2592D',
  },
  {
    id: 4,
    order: 5,
    path: '/contexts/autonomus-casa',
    label: 'Autonomus Casa',
    soundMale: AutonomusCasaMasc,
    soundFemale: AutonomusCasaFem,
    icon: HouseAnimated,
    pulse: PurplePulse,
    progressColor: '#BFA0D1',
    borderColor: '#71488A',
  },
]

export const HelpActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/home',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/home',
    label: 'Obrigado',
    iconPath: ConfirmIcon,
    iconWidth: 84.06,
    iconHeight: 48.15,
    soundMale: ObrigadoMasc,
    soundFemale: ObrigadoFem,
    backgroundColorOne: '#B2D8CC',
    backgroundColorTwo: '#8CC4B3',
    backgroundColorThree: '#65B199',
    borderColor: '#2C7660',
  },
]

export const QuickPhrasesActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/home',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/actions/preciso-ir-ao-banheiro',
    label: 'Preciso ir ao banheiro',
    iconPath: WordsIcon,
    iconWidth: 114.33,
    iconHeight: 71.85,
    soundMale: PrecisoIrAoBanheiroMasc,
    soundFemale: PrecisoIrAoBanheiroFem,
    backgroundColorOne: '#BEE9E7',
    backgroundColorTwo: '#9EDDDC',
    backgroundColorThree: '#7DD2D0',
    borderColor: '#2D6462',
  },
  {
    id: 2,
    order: 3,
    path: '/actions/ligar-a-TV',
    label: 'Quero ligar a TV',
    iconPath: WordsIcon,
    iconWidth: 114.33,
    iconHeight: 71.85,
    soundMale: LigarTVMasc,
    soundFemale: LigarTVFem,
    backgroundColorOne: '#BEE9E7',
    backgroundColorTwo: '#9EDDDC',
    backgroundColorThree: '#7DD2D0',
    borderColor: '#2D6462',
  },
  {
    id: 3,
    order: 4,
    path: '/actions/estou-com-dor',
    label: 'Estou com dor',
    iconPath: WordsIcon,
    iconWidth: 114.33,
    iconHeight: 71.85,
    soundMale: EstouComDorMasc,
    soundFemale: EstouComDorFem,
    backgroundColorOne: '#BEE9E7',
    backgroundColorTwo: '#9EDDDC',
    backgroundColorThree: '#7DD2D0',
    borderColor: '#2D6462',
  },
  {
    id: 4,
    order: 5,
    path: '/actions/quero-passear',
    label: 'Quero passear',
    iconPath: WordsIcon,
    iconWidth: 114.33,
    iconHeight: 71.85,
    soundMale: QueroPassearMasc,
    soundFemale: QueroPassearFem,
    backgroundColorOne: '#BEE9E7',
    backgroundColorTwo: '#9EDDDC',
    backgroundColorThree: '#7DD2D0',
    borderColor: '#2D6462',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const AutonomusCasaActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/home',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/sala',
    label: 'Sala',
    iconPath: SalaIcon,
    iconWidth: 83.01,
    iconHeight: 58.65,
    soundMale: SalaMasc,
    soundFemale: SalaFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#79A8B9',
    backgroundColorThree: '#5B8EA2',
    borderColor: '#245365',
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/orteses-proteses',
    label: 'Órteses e próteses',
    iconPath: maoOpen,
    iconWidth: 90,
    iconHeight: 90,
    soundMale: QuartoMasc,
    soundFemale: QuartoFem,
    backgroundColorOne: '#B5C0E2',
    backgroundColorTwo: '#8D9BC5',
    backgroundColorThree: '#6274A8',
    borderColor: '#6254A8',
  },
  {
    id: 3,
    order: 4,
    // path: '/contexts/banheiro',
    path: '/home',
    label: 'Banheiro',
    iconPath: BanheiroIcon,
    iconWidth: 73.99,
    iconHeight: 60.27,
    soundMale: BanheiroMasc,
    soundFemale: BanheiroFem,
    backgroundColorOne: '#EFC1DE',
    backgroundColorTwo: '#D194BB',
    backgroundColorThree: '#AC6693',
    borderColor: '#AC4693',
  },
  {
    id: 4,
    order: 5,
    // path: '/contexts/cozinha',
    path: '/home',
    label: 'Cozinha',
    iconPath: CozinhaIcon,
    iconWidth: 79.03,
    iconHeight: 59.65,
    soundMale: CozinhaMasc,
    soundFemale: CozinhaFem,
    backgroundColorOne: '#E5C1C1',
    backgroundColorTwo: '#CB9797',
    backgroundColorThree: '#AC6767',
    borderColor: '#AC5857',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const CasaSalaActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/autonomus-casa',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    // path: '/actions/lampada',
    // path: '/home',
    label: 'Lâmpada',
    iconPath: LampadaIcon,
    activeIconPath: LampadaOnIcon,
    iconWidth: 39.1,
    iconHeight: 59.02,
    soundMale: LampadaMasc,
    soundFemale: LampadaFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#79A8B9',
    backgroundColorThree: '#5B8EA2',
    borderColor: '#337DA4',
    buttontype: 'toggle',
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/televisao',
    label: 'Televisão',
    iconPath: TVIcon,
    iconWidth: 69.59,
    iconHeight: 63.02,
    soundMale: TVMasc,
    soundFemale: TVFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#79A8B9',
    backgroundColorThree: '#5B8EA2',
    borderColor: '#337DA4',
  },
  {
    id: 3,
    order: 4,
    path: '/contexts/ar-condicionado',
    label: 'Ar-condicionado',
    iconPath: ArCondicionadoIcon,
    iconWidth: 84.41,
    iconHeight: 41.23,
    soundMale: ArCondicionadoMasc,
    soundFemale: ArCondicionadoFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#79A8B9',
    backgroundColorThree: '#5B8EA2',
    borderColor: '#337DA4',
  },
  {
    id: 4,
    order: 5,
    // path: '/home',
    label: 'Tomada',
    iconPath: TomadaIcon,
    activeIconPath: TomadaOnIcon,
    iconWidth: 45.1,
    iconHeight: 61.82,
    soundMale: TomadaMasc,
    soundFemale: TomadaFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#79A8B9',
    backgroundColorThree: '#5B8EA2',
    borderColor: '#337DA4',
    buttontype: 'toggle',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const OrteseProteseActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/autonomus-casa',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    // path: '/actions/lampada',
    // path: '/home',
    label: 'Prótese',
    iconPath: maoFechada,
    activeIconPath: maoOpen,
    iconWidth: 100,
    iconHeight: 100,
    soundMale: LampadaMasc,
    soundFemale: LampadaFem,
    backgroundColorOne: '#B5C0E2',
    backgroundColorTwo: '#8D9BC5',
    backgroundColorThree: '#6274A8',
    borderColor: '#6254A8',
    buttontype: 'toggle',
  },
  {
    id: 2,
    order: 3,
    // path: '/contexts/ar-condicionado',
    label: 'Dispositivo 1',
    iconPath: Embreve,
    iconWidth: 60,
    iconHeight: 60,
    soundMale: ArCondicionadoMasc,
    soundFemale: ArCondicionadoFem,
    backgroundColorOne: '#B5C0E2',
    backgroundColorTwo: '#8D9BC5',
    backgroundColorThree: '#6274A8',
    borderColor: '#6254A8',
  },
  {
    id: 3,
    order: 4,
    // path: '/contexts/ar-condicionado',
    label: 'Dispositivo 2',
    iconPath: Embreve,
    iconWidth: 60,
    iconHeight: 60,
    soundMale: ArCondicionadoMasc,
    soundFemale: ArCondicionadoFem,
    backgroundColorOne: '#B5C0E2',
    backgroundColorTwo: '#8D9BC5',
    backgroundColorThree: '#6274A8',
    borderColor: '#6254A8',
  },
  {
    id: 4,
    order: 5,
    // path: '/contexts/ar-condicionado',
    label: 'Dispositivo 3',
    iconPath: Embreve,
    iconWidth: 60,
    iconHeight: 60,
    soundMale: ArCondicionadoMasc,
    soundFemale: ArCondicionadoFem,
    backgroundColorOne: '#B5C0E2',
    backgroundColorTwo: '#8D9BC5',
    backgroundColorThree: '#6274A8',
    borderColor: '#6254A8',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]
export const CasaSalaArCondicionadoActionsToContext = [
  {
    id: 0,
    order: 1,
    // path: '/actions/grupo01',
    // path: '/contexts/sala',
    label: 'Grupo 01',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: Grupo1Masc,
    soundFemale: Grupo1Fem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'ac',
    content: {
      temperature: '18',
      airvelocity: VentoForteIcon,
      mode: FlocoIcon,
    },
  },
  {
    id: 1,
    order: 2,
    // path: '/actions/grupo02',
    // path: '/contexts/sala',
    label: 'Grupo 02',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: Grupo2Masc,
    soundFemale: Grupo2Fem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'ac',
    content: {
      temperature: '20',
      airvelocity: VentoMedioIcon,
      mode: GotasIcon,
    },
  },
  {
    id: 2,
    order: 3,
    // path: '/actions/grupo03',
    // path: '/contexts/sala',
    label: 'Grupo 03',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: Grupo3Masc,
    soundFemale: Grupo3Fem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'ac',
    content: {
      temperature: '22',
      airvelocity: VentoFracoIcon,
      mode: VentiladorIcon,
    },
  },
  /*  {
    id: 3,
    order: 4,
    // path: '/actions/grupo04',
    path: '/contexts/sala',
    label: 'Grupo 04',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: Grupo4Masc,
    soundFemale: Grupo4Fem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'ac',
    content: { temperature: '25', airvelocity: VentoMedioIcon, mode: FluxoIcon },
  }, */

  {
    id: 3,
    order: 4,
    // path: '/actions/ar-condicionado/on-off',
    label: 'Desligar',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: LigarDesligarMasc,
    soundFemale: LigarDesligarFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
  },
  {
    id: 4,
    order: 5,
    // path: '/actions/calor',
    path: '/contexts/sala',
    label: 'Calor',
    iconPath: CalorIcon,
    iconWidth: 81,
    iconHeight: 78,
    soundMale: CalorMasc,
    soundFemale: CalorFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 5,
    order: 6,
    // path: '/actions/frio',
    path: '/contexts/sala',
    label: 'Frio',
    iconPath: FrioIcon,
    iconWidth: 80.3,
    iconHeight: 75.95,
    soundMale: FrioMasc,
    soundFemale: FrioFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 6,
    order: 7,
    path: '/contexts/sala',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 7,
    order: 8,
    path: '/home',
    label: 'Obrigado',
    iconPath: ConfirmIcon,
    iconWidth: 84.06,
    iconHeight: 48.15,
    soundMale: ObrigadoMasc,
    soundFemale: ObrigadoFem,
    backgroundColorOne: '#B2D8CC',
    backgroundColorTwo: '#8CC4B3',
    backgroundColorThree: '#65B199',
    borderColor: '#2C7660',
  },
  {
    id: 8,
    order: 9,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const TelevisaoActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/televisao',
    label: 'Volume',
    iconPath: VolumeIcon,
    iconWidth: 56.09,
    iconHeight: 48.51,
    soundMale: VolumeMasc,
    soundFemale: VolumeFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'TvVolume',
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/televisao',
    label: 'Canal',
    iconPath: CanalIcon,
    iconWidth: 44.17,
    iconHeight: 24.28,
    soundMale: CanalMasc,
    soundFemale: CanalFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
    buttontype: 'TvChannel',
  },
  {
    id: 2,
    order: 3,
    // path: '/actions/televisao/mudo',
    label: 'Mudo',
    iconPath: MudoIcon,
    iconWidth: 40.5,
    iconHeight: 35.76,
    soundMale: MudoMasc,
    soundFemale: MudoFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
  },
  {
    id: 3,
    order: 4,
    // path: '/actions/televisao/on-off',
    label: 'Ligar/Desligar',
    iconPath: LigarDesligarIcon,
    iconWidth: 30,
    iconHeight: 36.45,
    soundMale: LigarDesligarMasc,
    soundFemale: LigarDesligarFem,
    backgroundColorOne: '#B6CED8',
    backgroundColorTwo: '#B6CED8',
    backgroundColorThree: '#79A8B9',
    borderColor: '#245365',
  },
  {
    id: 4,
    order: 5,
    path: '/contexts/sala',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 5,
    order: 6,
    path: '/home',
    label: 'Obrigado',
    iconPath: ConfirmIcon,
    iconWidth: 84.06,
    iconHeight: 48.15,
    soundMale: ObrigadoMasc,
    soundFemale: ObrigadoFem,
    backgroundColorOne: '#B2D8CC',
    backgroundColorTwo: '#8CC4B3',
    backgroundColorThree: '#65B199',
    borderColor: '#2C7660',
  },
  {
    id: 6,
    order: 7,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const TelevisaoCanaisActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/televisao/canais',
    label: 'Diminuir',
    iconPath: DiminuirIcon,
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/televisao/canais',
    label: 'Aumentar',
    iconPath: AumentarIcon,
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/televisao/canais',
    label: 'Voltar',
    iconPath: ModalBackIcon,
  },
]

export const TelevisaoVolumeActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/televisao/volume',
    label: 'Diminuir',
    value: -1,
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/televisao/volume',
    label: 'Aumentar',
    value: 1,
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/televisao/volume',
    label: 'Diminuir',
    value: -5,
  },
  {
    id: 3,
    order: 4,
    path: '/contexts/televisao/volume',
    label: 'Aumentar',
    value: 5,
  },
  {
    id: 4,
    order: 5,
    path: '/contexts/televisao/volume',
    label: 'Diminuir',
    value: -10,
  },
  {
    id: 5,
    order: 6,
    path: '/contexts/televisao/volume',
    label: 'Aumentar',
    value: 10,
  },
  {
    id: 6,
    order: 7,
    path: '/contexts/televisao/volume',
    label: 'Voltar',
    iconPath: ModalBackIcon,
  },
]

export const CategoryActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/home',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/contexts/minhas-necessidades',
    label: 'Minhas necessidades',
    iconPath: ToaletIcon,
    iconWidth: 108.67,
    iconHeight: 88.51,
    soundMale: NecessidadesMasc,
    soundFemale: NecessidadesFem,
    backgroundColorOne: '#FDF6E2',
    backgroundColorTwo: '#F1DDA4',
    backgroundColorThree: '#E8C357',
    borderColor: '#A67A01',
  },
  {
    id: 2,
    order: 3,
    path: '/contexts/meu-conforto',
    label: 'Meu conforto',
    iconPath: ConfortIcon,
    iconWidth: 89.26,
    iconHeight: 65.57,
    soundMale: ConfortoMasc,
    soundFemale: ConfortoFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 3,
    order: 4,
    path: '/contexts/minha-alimentacao',
    label: 'Minha alimentação',
    iconPath: FoodIcon,
    iconWidth: 95.46,
    iconHeight: 95.46,
    soundMale: AlimentacaoMasc,
    soundFemale: AlimentacaoFem,
    backgroundColorOne: '#EBB9CA',
    backgroundColorTwo: '#D186A2',
    backgroundColorThree: '#BA7089',
    borderColor: '#9F576F',
  },
  {
    id: 4,
    order: 5,
    path: '/contexts/meu-corpo',
    label: 'Meu corpo',
    iconPath: BodyIcon,
    iconWidth: 56.94,
    iconHeight: 86.47,
    soundMale: MeuCorpoMasc,
    soundFemale: MeuCorpoFem,
    backgroundColorOne: '#FFD6D6',
    backgroundColorTwo: '#DAA2A2',
    backgroundColorThree: '#CE8787',
    borderColor: '#9F5959',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const BathroomActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/minhas-opcoes',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/actions/sanitario',
    label: 'Quero usar o sanitário',
    iconPath: SanitarioIcon,
    iconWidth: 77.32,
    iconHeight: 76.46,
    soundMale: SanitarioMasc,
    soundFemale: SanitarioFem,
    backgroundColorOne: '#FDF6E2',
    backgroundColorTwo: '#F1DDA4',
    backgroundColorThree: '#E8C357',
    borderColor: '#A67A01',
  },
  {
    id: 2,
    order: 3,
    path: '/actions/escovar-os-dentes',
    label: 'Quero escovar os dentes',
    iconPath: EscovarOsDentesIcon,
    iconWidth: 76.59,
    iconHeight: 73.09,
    soundMale: EscovarOsDentesMasc,
    soundFemale: EscovarOsDentesFem,
    backgroundColorOne: '#FDF6E2',
    backgroundColorTwo: '#F1DDA4',
    backgroundColorThree: '#E8C357',
    borderColor: '#A67A01',
  },
  {
    id: 3,
    order: 4,
    path: '/actions/banho',
    label: 'Quero tomar banho',
    iconPath: BanhoIcon,
    iconWidth: 54.49,
    iconHeight: 74.05,
    soundMale: BanhoMasc,
    soundFemale: BanhoFem,
    backgroundColorOne: '#FDF6E2',
    backgroundColorTwo: '#F1DDA4',
    backgroundColorThree: '#E8C357',
    borderColor: '#A67A01',
  },
  {
    id: 4,
    order: 5,
    path: '/actions/enjoo',
    label: 'Estou enjoado',
    iconPath: EnjooIcon,
    iconWidth: 72.4,
    iconHeight: 72.4,
    soundMale: EnjooMasc,
    soundFemale: EnjooFem,
    backgroundColorOne: '#FDF6E2',
    backgroundColorTwo: '#F1DDA4',
    backgroundColorThree: '#E8C357',
    borderColor: '#A67A01',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const ConfortActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/minhas-opcoes',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/actions/calor',
    label: 'Estou com calor',
    iconPath: CalorIcon,
    iconWidth: 81,
    iconHeight: 78,
    soundMale: CalorMasc,
    soundFemale: CalorFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 2,
    order: 3,
    path: '/actions/frio',
    label: 'Estou com frio',
    iconPath: FrioIcon,
    iconWidth: 80.3,
    iconHeight: 75.95,
    soundMale: FrioMasc,
    soundFemale: FrioFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 3,
    order: 4,
    path: '/actions/deitar',
    label: 'Quero me deitar',
    iconPath: DeitarIcon,
    iconWidth: 93.31,
    iconHeight: 52.79,
    soundMale: DeitarMasc,
    soundFemale: DeitarFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 4,
    order: 5,
    path: '/actions/posicao',
    label: 'Quero mudar de posição',
    iconPath: PosicaoIcon,
    iconWidth: 84.9,
    iconHeight: 61.65,
    soundMale: PosicaoMasc,
    soundFemale: PosicaoFem,
    backgroundColorOne: '#E3DEF7',
    backgroundColorTwo: '#CCC2F3',
    backgroundColorThree: '#A18FEF',
    borderColor: '#644FB0',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const FoodActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/minhas-opcoes',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/actions/comer',
    label: 'Quero comer',
    iconPath: ComidaIcon,
    iconWidth: 66.28,
    iconHeight: 66.28,
    soundMale: ComerMasc,
    soundFemale: ComerFem,
    backgroundColorOne: '#EBB9CA',
    backgroundColorTwo: '#D186A2',
    backgroundColorThree: '#BA7089',
    borderColor: '#9F576F',
  },
  {
    id: 2,
    order: 3,
    path: '/actions/tomar-agua',
    label: 'Quero tomar água',
    iconPath: BebidaIcon,
    iconWidth: 46.71,
    iconHeight: 59.75,
    soundMale: AguaMasc,
    soundFemale: AguaFem,
    backgroundColorOne: '#EBB9CA',
    backgroundColorTwo: '#D186A2',
    backgroundColorThree: '#BA7089',
    borderColor: '#9F576F',
  },
  {
    id: 3,
    order: 4,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]

export const BodyActionsToContext = [
  {
    id: 0,
    order: 1,
    path: '/contexts/minhas-opcoes',
    label: 'Voltar',
    iconPath: BackIcon,
    iconWidth: 85.3,
    iconHeight: 53.66,
    soundMale: VoltarMasc,
    soundFemale: VoltarFem,
    backgroundColorOne: '#99BED1',
    backgroundColorTwo: '#669DBB',
    backgroundColorThree: '#337DA4',
    borderColor: '#337DA4',
  },
  {
    id: 1,
    order: 2,
    path: '/actions/estou-com-dor-de-cabeca',
    label: 'Estou com dor de cabeça',
    iconPath: CabecaIcon,
    iconWidth: 54.24,
    iconHeight: 102.38,
    soundMale: DorDeCabecaMasc,
    soundFemale: DorDeCabeçaFem,
    backgroundColorOne: '#FFD6D6',
    backgroundColorTwo: '#DAA2A2',
    backgroundColorThree: '#CE8787',
    borderColor: '#9F5959',
  },
  {
    id: 2,
    order: 3,
    path: '/actions/estou-com-dor-na-perna',
    label: 'Estou com dor na perna',
    iconPath: PernaIcon,
    iconWidth: 53.33,
    iconHeight: 80.98,
    soundMale: DorNaPernaMasc,
    soundFemale: DorNaPernaFem,
    backgroundColorOne: '#FFD6D6',
    backgroundColorTwo: '#DAA2A2',
    backgroundColorThree: '#CE8787',
    borderColor: '#9F5959',
  },
  {
    id: 3,
    order: 4,
    path: '/actions/estou-com-dor-nas-costas',
    label: 'Estou com dor nas costas',
    iconPath: CostasIcon,
    iconWidth: 57.11,
    iconHeight: 86.72,
    soundMale: DorNasCostasMasc,
    soundFemale: DorNasCostasFem,
    backgroundColorOne: '#FFD6D6',
    backgroundColorTwo: '#DAA2A2',
    backgroundColorThree: '#CE8787',
    borderColor: '#9F5959',
  },
  {
    id: 4,
    order: 5,
    path: '/actions/estou-com-dor-no-ombro',
    label: 'Estou com dor no ombro',
    iconPath: OmbroIcon,
    iconWidth: 54.74,
    iconHeight: 83.12,
    soundMale: DorNoOmbroMasc,
    soundFemale: DorNoOmbroFem,
    backgroundColorOne: '#FFD6D6',
    backgroundColorTwo: '#DAA2A2',
    backgroundColorThree: '#CE8787',
    borderColor: '#9F5959',
  },
  {
    id: 5,
    order: 6,
    path: '/actions/preciso-de-ajuda',
    label: 'Preciso de ajuda',
    iconPath: HelpIcon,
    iconWidth: 94.41,
    iconHeight: 94.63,
    soundMale: PrecisoDeAjudaMasc,
    soundFemale: PrecisoDeAjudaFem,
    backgroundColorOne: '#fbbebf',
    backgroundColorTwo: '#f89e9e',
    backgroundColorThree: '#f67d7e',
    borderColor: '#ae292a',
  },
]



api.js: 

import axios from 'axios'

const api = axios.create({
  baseURL: 'http://localhost:4000/',
})

export default api



UserInputKeyService.js: 

class UserInputKeyService {
  listeners = []

  addInputListener = (key, onKeyDownFunction) => {
    this.listeners.push(onKeyDownFunction)

    document.addEventListener('keydown', ev => {
      if (ev.code === key) {
        console.log(`KEY DOWN EVENT: ${ev.code}`)

        const res = {
          Action: 'selected',
        }

        onKeyDownFunction(res)
      }
    })
  }

  dispose = () => {
    this.listeners.map(l => {
      document.removeEventListener('keydown', l)

      return l
    })

    this.listeners = []
  }
}

export default UserInputKeyService



server.py: 

import time

import cv2
import math

from blink_utils.models.face_detectors import UltraLightONNX
from blink_utils.models.face_aligners import Aligner5LandmarksDlib
from blink_utils.models.roi_extractors import ROI5LandmarksDlib, isEyePytorch
from blink_utils.models.classifiers import SigmoidCNNPytorch

from blink_utils.models import PreRotator, WindowFilter

from blink_utils import BlinkLengthEstimator
from networkingIO import ReqIO

import os

import argparse

parser = argparse.ArgumentParser()
parser.add_argument("video", nargs="?")
args = parser.parse_args()

showVideo = not (args.video is None)


DATA_PATH = os.path.abspath("modelFiles/")
PORT = 8000

MIN_DUR_BLINK = 0.5
THRESHOLD_MIN_EEM = 0.25
THRESHOLD_MAX_EEM = 0.6

faceDetector = UltraLightONNX(DATA_PATH, "version-slim-320_128_simplified.onnx", threshold = 0.6, inputSize=128)
aligner = Aligner5LandmarksDlib(DATA_PATH)
roiExtractor = ROI5LandmarksDlib(DATA_PATH, pointsList = ['left', 'right'], scales = [[(1.5, 1.5)], [(1.5, 1.5)]], updateRound = 1)
roiChecker = isEyePytorch(DATA_PATH, "eholho_40x40.pt", threshold=None, fixedSize=(40,40))
classifier = SigmoidCNNPytorch(DATA_PATH, "ecc_40x40.pt", threshold=None, fixedSize=(40,40), normalize=True)
lengthEstimator = BlinkLengthEstimator()
prerot = PreRotator()
filt = WindowFilter('gaussian', 7, threshold=0.7)

reqIO = ReqIO('cancel', port=PORT)


videoCapture = None
try:
    videoCapture = cv2.VideoCapture(0)
except:
    print('Não foi possível carregar o dispositivo de captura de vídeo')
    exit()

if videoCapture.read()[1] is None:
    print('Não foi possível carregar o dispositivo de captura de vídeo')
    exit()


lastBlinkSentId = 0
frameCount = 0
lastSec = math.floor(time.time())


lastPoints = None

def processFrame(frame, lastOutput):
    global lastPoints

    origFrame = frame

    if showVideo: cv2.imshow("Frame", frame)
    
    frame = prerot(frame)

    facePoints = faceDetector(frame)
    if facePoints is None:
        newFacePoints = faceDetector(origFrame)
        if newFacePoints is None:
            if lastPoints is None:
                return lastOutput
            else:
                facePoints = lastPoints
        else:
            prerot.reset()
            facePoints = newFacePoints
            frame = origFrame

    lastPoints = facePoints
    faceFrame = frame[facePoints['y1']:facePoints['y2'], facePoints['x1']:facePoints['x2']]
    frame = faceFrame

    angle = aligner(frame)
    frame = aligner.alignFrame(frame)

    prerot.update(angle, facePoints)

    if showVideo: cv2.imshow("Face", frame)


    eyesFrames = None
    eyesPointsFromScales = roiExtractor(frame)
    eyesFrames = [frame[eyesPoints['y1']:eyesPoints['y2'], eyesPoints['x1']:eyesPoints['x2']]
                    for eyesPoints in eyesPointsFromScales]
    frame = eyesFrames

    roiChecker(frame)
    probs = roiChecker.getProbs()
    if probs[0] < probs[1]:
        probs[0], probs[1] = probs[1], probs[0]
        frame[0], frame[1] = frame[1], frame[0]

    if probs[0] < THRESHOLD_MIN_EEM:
        return lastOutput
    elif probs[1] >= THRESHOLD_MAX_EEM:
        frame = frame
    else:
        frame = [frame[0]]


    output = classifier(frame)
    output = filt(output)

    return output


lastOutput = 0
while True:
    _, frame = videoCapture.read()
    output = processFrame(frame, lastOutput)
    lastOutput = output

    lengthEstimator.updateStatus(output)
    blinkId, blinkDur = lengthEstimator.getLastBlink()

    if blinkId > lastBlinkSentId and blinkDur >= MIN_DUR_BLINK:
        print("Blink! Duration: ", blinkDur)
        message = { 'Action': 'selected'}
        lastBlinkSentId = blinkId
        if not reqIO.comunicate(message):
            print("Falha de comunicação com o socket")


    frameCount += 1
    if math.floor(time.time()) > lastSec:
        print("FPS: {}".format(frameCount))
        lastSec = math.floor(time.time())
        frameCount = 0

    cv2.waitKey(1)



